{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "$id": "https://s3.amazonaws.com/rcs-raptor-schema/v1/RaptorComplete.schema.json",
  "title": "Raptor",
  "description": "All the Raptor schemas combined into one.",
  "type": "object",
  "properties": {
    "RaptorEnums": {
      "description": "Auto Generation: Raptor core enumeration definitions",
      "$ref": "#/definitions/RaptorEnums"
    },
    "RaptorTimedEventOrder": {
      "description": "Auto Generation: Raptor data object used for ordering raptor event and recalc",
      "$ref": "#/definitions/RaptorTimedEventOrder"
    },
    "RaptorAWSS3Response": {
      "description": "Auto Generation: Response object from raptor upload request, containing upload credentials",
      "$ref": "#/definitions/RaptorAWSS3Response"
    },
    "RaptorAPIImportResponse": {
      "description": "Auto Generation: Response object from raptor import request, containing upload credentials",
      "$ref": "#/definitions/RaptorAPIImportResponse"
    },
    "RaptorAPIMessageResponse": {
      "description": "Auto Generation: Generic Response object from most standard API Calls",
      "$ref": "#/definitions/RaptorAPIMessageResponse"
    },
    "RaptorAPICountResponse": {
      "description": "Auto Generation: Response object from raptor count API requests",
      "$ref": "#/definitions/RaptorAPICountResponse"
    },
    "RaptorAPIContentManagementRequest": {
      "description": "Auto Generation: Basic Content management requrest obect , by assetid or relative file path",
      "$ref": "#/definitions/RaptorAPIContentManagementRequest"
    },
    "RaptorAPIContentManagementFindFileResponse": {
      "description": "Auto Generation: Returns array of relative files matching the find file request",
      "$ref": "#/definitions/RaptorAPIContentManagementFindFileResponse"
    },
    "RaptorAPIContentManagementFileInfoResponse": {
      "description": "Auto Generation: Returns a basic file info object explaining basic information about the file object being queried.",
      "$ref": "#/definitions/RaptorAPIContentManagementFileInfoResponse"
    },
    "RaptorAPIContentManagementUploadResponse": {
      "description": "Auto Generation: Response from Content Management initalizeupload API Call, with RaptorAWSS3Response",
      "$ref": "#/definitions/RaptorAPIContentManagementUploadResponse"
    },
    "RaptorAPIContentManagementDownloadResponse": {
      "description": "Auto Generation: Response from Content Management initalizeupload API Call with download url",
      "$ref": "#/definitions/RaptorAPIContentManagementDownloadResponse"
    },
    "RaptorAPIContentManagementFileStoreInfoResponse": {
      "description": "Auto Generation: Response from Content Management File Store Info Query",
      "$ref": "#/definitions/RaptorAPIContentManagementFileStoreInfoResponse"
    },
    "RaptorAnalysisData": {
      "description": "Auto Generation: Raptor data object used to store data gathered during analysis",
      "$ref": "#/definitions/RaptorAnalysisData"
    },
    "RaptorTranscoderSettings": {
      "description": "Auto Generation: Raptor data object used to store transcoder setting",
      "$ref": "#/definitions/RaptorTranscoderSettings"
    },
    "RaptorAnalysisSettings": {
      "description": "Auto Generation: Raptor data object used to store analysis settings",
      "$ref": "#/definitions/RaptorAnalysisSettings"
    },
    "RaptorLoggingConfig": {
      "description": "Auto Generation: Raptor Debug Logging object used for configuring an application logger instance",
      "$ref": "#/definitions/RaptorLoggingConfig"
    },
    "RaptorLoggingMessage": {
      "description": "Auto Generation: Raptor Debug Logging object used to log debugging messages",
      "$ref": "#/definitions/RaptorLoggingMessage"
    },
    "RaptorPOIMarkup": {
      "description": "Auto Generation: Core object used for NON-DESTRUCTIVE playback markup",
      "$ref": "#/definitions/RaptorPOIMarkup"
    },
    "RaptorAssetFillData": {
      "description": "Auto Generation: Raptor AssetFIllData object used to tag asset will fill data properties",
      "$ref": "#/definitions/RaptorAssetFillData"
    },
    "RaptorPlayerConfig": {
      "description": "Auto Generation: Raptor Player Configuration objects used to describe player component configurations",
      "$ref": "#/definitions/RaptorPlayerConfig"
    },
    "RaptorEdgePlayerEnvironment": {
      "description": "Auto Generation: Raptor Player External Configuration Environment objects used to describe player component configurations",
      "$ref": "#/definitions/RaptorEdgePlayerEnvironment"
    },
    "RaptorPlayerSnapshot": {
      "description": "Auto Generation: Raptor Player Snapshot",
      "$ref": "#/definitions/RaptorPlayerSnapshot"
    },
    "RaptorAssetType": {
      "description": "Auto Generation: Core object to define different type of a raptor assets",
      "$ref": "#/definitions/RaptorAssetType"
    },
    "RaptorAsset": {
      "description": "Auto Generation: Core object to define a raptor asset",
      "$ref": "#/definitions/RaptorAsset"
    },
    "RaptorStationAsset": {
      "description": "Auto Generation: Core object to define a raptor station asset",
      "$ref": "#/definitions/RaptorStationAsset"
    },
    "RaptorStationsAsset": {
      "description": "Auto Generation: Core object to define a raptor station asset",
      "$ref": "#/definitions/RaptorStationsAsset"
    },
    "RaptorEvent": {
      "description": "Auto Generation: Core object to define a raptor event",
      "$ref": "#/definitions/RaptorEvent"
    },
    "RaptorJob": {
      "description": "Auto Generation: Core object to define a raptor job",
      "$ref": "#/definitions/RaptorJob"
    },
    "RaptorFillRule": {
      "description": "Auto Generation: Core object to define a raptor file rule",
      "$ref": "#/definitions/RaptorFillRule"
    },
    "RaptorFillHistory": {
      "description": "Auto Generation: Core object to define a raptor file history",
      "$ref": "#/definitions/RaptorFillHistory"
    },
    "RaptorStationBillboardConfig": {
      "description": "Auto Generation: Core object to define a raptor RaptorStationBillboardConfig",
      "$ref": "#/definitions/RaptorStationBillboardConfig"
    },
    "RaptorStation": {
      "description": "Auto Generation: Core object to define a raptor RaptorStation",
      "$ref": "#/definitions/RaptorStation"
    },
    "RaptorOrganization": {
      "description": "Auto Generation: Core object to define a raptor organization",
      "$ref": "#/definitions/RaptorOrganization"
    },
    "RaptorPlaylist": {
      "description": "Auto Generation: Core object to define a raptor playlist",
      "$ref": "#/definitions/RaptorPlaylist"
    },
    "RaptorSyncToFutureEventParams": {
      "description": "Auto Generation: Core object to define a raptor SyncToFutureEventParams",
      "$ref": "#/definitions/RaptorSyncToFutureEventParams"
    },
    "RaptorSyncToPastEventParams": {
      "description": "Auto Generation: Core object to define a raptor SyncToPastEventParams",
      "$ref": "#/definitions/RaptorSyncToPastEventParams"
    },
    "RaptorRecalcPlaylistReturn": {
      "description": "Auto Generation: return object from RecalcPlaylist",
      "$ref": "#/definitions/RaptorRecalcPlaylistReturn"
    },
    "RaptorSequencerEvent": {
      "description": "Auto Generation: Raptor Sequencer Event objects used to describe player component configurations",
      "$ref": "#/definitions/RaptorSequencerEvent"
    },
    "RaptorSequencerSnapshot": {
      "description": "Auto Generation: Raptor Sequencer queue snapshot",
      "$ref": "#/definitions/RaptorSequencerSnapshot"
    },
    "SplitEventCommand": {
      "description": "Auto Generation: SplitEventCommand",
      "$ref": "#/definitions/SplitEventCommand"
    },
    "RaptorXsltTransform": {
      "description": "Auto Generation: RaptorXsltTransform",
      "$ref": "#/definitions/RaptorXsltTransform"
    },
    "RaptorMessages": {
      "title": "RaptorMessages",
      "description": "Auto Generation: Complete list of raptor enums, for code",
      "type": "object",
      "properties": {
        "RaptorPlayerMessage_PublishInput": {
          "$ref": "#/definitions/RaptorPlayerMessage_PublishInput"
        }
      },
      "additionalProperties": false
    },
    "RaptorIcyMetadata": {
      "title": "RaptorIcyMetadata",
      "description": "Auto Generation: Data object used to manage Icecast Metadata properties, commonly used for resolving Icy Metadata Templates",
      "$ref": "#/definitions/RaptorIcyMetadata"
    },
    "RaptorUserToken": {
      "description": "Auto Generation: Core object to define a raptor user access token",
      "$ref": "#/definitions/RaptorUserToken"
    },
    "RaptorUser": {
      "description": "Auto Generation: Core object to define a raptor user",
      "$ref": "#/definitions/RaptorUser"
    },
    "RaptorCredentials": {
      "description": "Auto Generation: Core object to define a raptor credentials",
      "$ref": "#/definitions/RaptorCredentials"
    },
    "RaptorEncryptedCredentials": {
      "description": "Auto Generation: Core object to define a raptor user access token",
      "$ref": "#/definitions/RaptorEncryptedCredentials"
    },
    "RaptorGPIODeviceDictionary": {
      "description": "Auto Generation: Core object to define (G)eneral (P)urpose (I)nput (O)utput + (R)oute  configuration",
      "$ref": "#/definitions/RaptorGPIODeviceDictionary"
    },
    "MusicPointSong": {
      "title": "MusicPointSong",
      "description": "Auto Generation: Created from MusicPoint Swagger @ http://musicpointapi-iheartmedia-swagger.nonprod-prognplay-ihm.com/",
      "$ref": "#/definitions/MusicPointSong"
    },
    "MusicPointSongDetail": {
      "title": "MusicPointSongDetail",
      "description": "Auto Generation: Created from MusicPoint Swagger @ http://musicpointapi-iheartmedia-swagger.nonprod-prognplay-ihm.com/",
      "$ref": "#/definitions/MusicPointSongDetail"
    },
    "MusicPointSongFileResult": {
      "title": "MusicPointSongFileResult",
      "description": "Auto Generation: Created from MusicPoint Swagger @ http://musicpointapi-iheartmedia-swagger.nonprod-prognplay-ihm.com/",
      "$ref": "#/definitions/MusicPointSongFileResult"
    },
    "MusicPointSearchRequest": {
      "title": "MusicPointSearchRequest",
      "description": "Auto Generation: Created from MusicPoint Swagger @ http://musicpointapi-iheartmedia-swagger.nonprod-prognplay-ihm.com/",
      "$ref": "#/definitions/MusicPointSearchRequest"
    },
    "RaptorChangeSubscriber": {
      "title": "RaptorChangeSubscriber",
      "description": "Auto Generation: Core object to define RaptorChangeSubscriber",
      "$ref": "#/definitions/RaptorChangeSubscriber"
    },
    "RaptorChange": {
      "title": "RaptorChange",
      "description": "Auto Generation: Core object to define RaptorChange",
      "$ref": "#/definitions/RaptorChange"
    },
    "RaptorJobSchedule": {
      "title": "RaptorJobSchedule",
      "description": "Auto Generation: Core object to define RaptorJobSchedule",
      "$ref": "#/definitions/RaptorJobSchedule"
    },
    "RaptorLocalizerConfig": {
      "title": "RaptorLocalizerConfig",
      "description": "Auto Generation: Core object to define RaptorLocalizerConfig",
      "$ref": "#/definitions/RaptorLocalizerConfig"
    },
    "RaptorLocalizerSnapshot": {
      "title": "RaptorLocalizerSnapshot",
      "description": "Auto Generation: Core object to define RaptorLocalizerSnapshot",
      "$ref": "#/definitions/RaptorLocalizerSnapshot"
    },
    "RaptorMessageResponse": {
      "description": "Auto Generation: Generic Response object from most standard API Calls",
      "$ref": "#/definitions/RaptorMessageResponse"
    },
    "RaptorAudioLevelSnapshot": {
      "description": "Auto Generation: Audio Level object",
      "$ref": "#/definitions/RaptorAudioLevelSnapshot"
    },
    "RaptorAudioLevelAlertConfig": {
      "description": "Auto Generation: Audio Level object",
      "$ref": "#/definitions/RaptorAudioLevelAlertConfig"
    },
    "RaptorPlayerAudioLevelsConfig": {
      "description": "Auto Generation: Audio Level object",
      "$ref": "#/definitions/RaptorPlayerAudioLevelsConfig"
    },
    "RaptorDeviceToken": {
      "description": "Auto Generation: Core object to define a raptor user access token",
      "$ref": "#/definitions/RaptorDeviceToken"
    },
    "RaptorDevice": {
      "description": "Auto Generation: Core object to define a raptor user",
      "$ref": "#/definitions/RaptorDevice"
    },
    "RaptorLayout": {
      "description": "Auto Generation: Core object to define a RaptorLayout",
      "$ref": "#/definitions/RaptorLayout"
    },
    "RaptorLayoutModule": {
      "description": "Auto Generation: Core object to define a RaptorLayoutModule",
      "$ref": "#/definitions/RaptorLayoutModule"
    },
    "RaptorEdgeDeviceConfig": {
      "description": "Auto Generation: Core object to define a RaptorEdgeDeviceConfig",
      "$ref": "#/definitions/RaptorEdgeDeviceConfig"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "RaptorAnalysisData": {
      "Title": "RaptorAnalysisData",
      "description": "Data collected when running analysis on a raptor asset",
      "type": "object",
      "properties": {
        "LengthInBytes": {
          "description": "Length of the audio data in bytes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "LengthInSeconds": {
          "description": "Length of the audio data in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Channels": {
          "description": "Number of channels: Mono, Stereo...",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ChannelType": {
          "description": "Channel Audio Format: MP3, WAV, OGG...",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ChannelFrequency": {
          "description": "Channel Frequency in HZ (example 44100 samples per second)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "BitRate": {
          "description": "Bit rate per second",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "dBFS": {
          "description": "Digital Full Scale Peak Sample",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "LUFS": {
          "description": "Loudness Normalization Detection: EBUR128 Standard",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "TrimIn": {
          "description": "Analyzed TrimIn: Position in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "TrimOut": {
          "description": "Analyzed TrimOut: Position in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Segue": {
          "description": "Analyzed Segue: Position in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Intro1": {
          "description": "Analyzed Intro1: Position in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Intro2": {
          "description": "Analyzed Segue: Position in seconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Title": {
          "description": "Title (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Artist": {
          "description": "Artist (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Album": {
          "description": "Album (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AlbumArtist": {
          "description": "Album Artist (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Subtitle": {
          "description": "Subtitle (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BPM": {
          "description": "Average Beats Per Minute (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Composer": {
          "description": "Composer (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Copyright": {
          "description": "Copyright (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Genre": {
          "description": "Genre (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Grouping": {
          "description": "Grouping (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Publisher": {
          "description": "Publisher (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Encoder": {
          "description": "Encoder (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Lyricist": {
          "description": "Lyricist (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Lyrics": {
          "description": "Lyrics (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Year": {
          "description": "Year (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Conductor": {
          "description": "Conductor (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Track": {
          "description": "Track (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Producer": {
          "description": "Producer (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Comment": {
          "description": "Comment (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Mood": {
          "description": "Mood (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Rating": {
          "description": "Rating (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ISRC": {
          "description": "ISRC (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Remixer": {
          "description": "Remixer (Wellknown Metadata)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "MD5": {
          "description": "Calculated MD5 for the file being analyzed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginalFileName": {
          "description": "Name of the original File, if referenced when analysis took place.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AnalysisDateTime": {
          "description": "Last audio analysis (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Error": {
          "description": "Used to track and report any errors during analysis",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorTranscoderSettings": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name used to look up transcoder settings",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AudioUrl": {
          "description": "Url of the Audio that needs to be transcoded",
          "type": "string"
        },
        "StartPosition": {
          "description": "The file start position of where to start transcoding from, if null start from 0.0 position",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "EndPosition": {
          "description": "The file start position of where to start transcoding to, if null transcode to end of file",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "TranscodeFormat": {
          "description": "The format to encode the audio file too, MP3 is used if not included",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlaybackFormat"
            },
            {
              "type": "null"
            }
          ]
        },
        "TranscodeParams": {
          "description": "If additional Params are need for encoding / transcoding",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAnalysisSettings": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name used to look up analysis settings",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AudioUrl": {
          "description": "Url of the Audio that needs to be analysis",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DecibelSilence": {
          "description": "Anything below this decibel value is consider silence",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": -80
        },
        "DecibelTrimIn": {
          "description": "First samples above this value will be used to set the trim in / fade in position",
          "type": "number",
          "default": -50
        },
        "DecibelTrimInEnabled": {
          "description": "Enable the use of the trim in detection",
          "type": "boolean",
          "default": true
        },
        "DecibelTrimOut": {
          "description": "Last sample above this value will be used to set the trim out / fade out position",
          "type": "number",
          "default": -50
        },
        "DecibelTrimOutEnabled": {
          "description": "Enable the use of the trim in detection",
          "type": "boolean",
          "default": true
        },
        "DecibelSegue": {
          "description": "First samples from beginning of audio above this value will be used to set the segue position",
          "type": "number",
          "default": -18
        },
        "DecibelSegueEnabled": {
          "description": "Enable the use of the segue detection",
          "type": "boolean",
          "default": true
        },
        "AnalysisPrecision": {
          "description": "Accuracy in decimal places, Used to determine how accurate we are with position detection",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 3
        },
        "MetadataAnalysisMappingDictionary": {
          "description": "A Dictionary of Analysis Mapping configuration options",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorAnalysisMappingDictionary"
            }
          ]
        },
        "POIMarkerAnalysisMappingDictionary": {
          "description": "A Dictionary used to store handling of POIMark analysis detection mappings",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorAnalysisMappingDictionary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAnalysisMappingDictionary": {
      "title": "RaptorAnalysisMappingDictionary",
      "description": "Analysis Attribute Mapping - used to determine what to do after analysis is done for each mapped attribute",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorAnalysisMappingConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorAnalysisMappingConfig": {
      "title": "RaptorAnalysisMappingConfig",
      "description": "Configuration setting for each Analysis mapped attribute",
      "type": "object",
      "properties": {
        "MappingKey": {
          "title": "MappingKey",
          "description": "Asset property being mapped, should be the same as the key if used in a dictionary",
          "type": "string"
        },
        "MappingRule": {
          "title": "EnumAnalysisMappingRule",
          "description": "Should the mapping be automatically updated.",
          "$ref": "#/definitions/EnumAnalysisMappingRule"
        },
        "MappingSource": {
          "title": "EnumAnalysisMappingSource",
          "description": "What is the source of the mapping data",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumAnalysisMappingSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "MappingValue": {
          "title": "What property or value should be used to populate the asset attribute",
          "description": "Should the mapping be automatically updated.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAsset": {
      "title": "RaptorAsset",
      "description": "represents a parent Asset containing fixed fields and fields a station can override",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"
        },
        "AssetID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "AssetTypeID": {
          "description": "asset type",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original Asset this one was created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "Title": {
          "description": "primary title of asset",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Voice": {
          "description": "voice talent of asset",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Artist": {
          "description": "primary artist of asset",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DisplayTitle": {
          "description": "Global Display Title used for export (in band metadata, now playing export) across all stations",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DisplayArtist": {
          "description": "Global Display Artist used for export (in band metadata, now playing export) across all stations",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Advertiser": {
          "description": "advertiser name, example: McDonald’s",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Album": {
          "description": "album name of asset",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Brand": {
          "description": "Brand, example: Nescafe",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ISRC": {
          "description": "asset ISRC",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ISCI": {
          "description": "asset ISCI",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Version": {
          "description": "Version or Mix field",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Label": {
          "description": "Record Label",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Year": {
          "description": "Year Associated with the asser",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Comment": {
          "description": "Comment",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ImageUrl": {
          "description": "ImageUrl",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedBy": {
          "description": "Who Created this Asset: (examples: User Account, Music Point Service, Zetta Replication Service, ...)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginalFileName": {
          "description": "Name of the original File, when the latest version of the asset was imported!",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StartDateTime": {
          "description": "DO NOT USE - OBSOLETED (2020-08-27, Replaced with ReleaseDateTime)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ReleaseDateTime": {
          "description": "Release datetime (ISO8601) - Audio can not be played before this datetime",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EndDateTime": {
          "description": "end datetime (ISO8601) - Audio can not be played after this datetime",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "KillDateTime": {
          "description": "kill datetime (ISO8601) - Audio needs to removed/deleted from the system after this data",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "RecordedDate": {
          "description": "Recorded date - audio was added or modified (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Tags": {
          "description": " - tags associated with the asset",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ExternalIDs": {
          "description": "External ids associated with the asset (Depreciated 2019-07-01)",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorTypeValuePair"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ThirdPartyIDs": {
          "description": "Stores Third Party Ids, used for referencing third party systems, associated with an asset. Please Use Recommending Naming Convention {Application}_{CustomField}",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAssetThirdPartyReferences"
            },
            {
              "type": "null"
            }
          ]
        },
        "POIMarkup": {
          "description": "Asset level Point of Interest markup",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPOIMarkup"
            },
            {
              "type": "null"
            }
          ]
        },
        "POIPlaybackView": {
          "description": "Asset calculated Playback Points of Interest",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPOIPlaybackView"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationAssets": {
          "description": "(READONLY) list of station asset values ",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorStationAsset"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "AnalysisData": {
          "description": "data associated with an asset, when running audio Analysis",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAnalysisData"
            },
            {
              "type": "null"
            }
          ]
        },
        "MusicPointData": {
          "description": "data associated with an asset, when imported from MusicPoint",
          "oneOf": [
            {
              "$ref": "#/definitions/MusicPointSongDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "FillData": {
          "description": "Data associated with special asset fill rules",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAssetFillData"
            },
            {
              "type": "null"
            }
          ]
        },
        "FTPIngest": {
          "description": "FTP Ingest asset sub document",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAssetFTPIngest"
            },
            {
              "type": "null"
            }
          ]
        },
        "BedType": {
          "description": "BedType",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumBedType"
            },
            {
              "type": "null"
            }
          ]
        },
        "CustomFields": {
          "description": "Stores Custom Fields for an asset.",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAssetCustomFields"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAssetArray": {
      "title": "RaptorAssetArray",
      "description": "represents an array of assets",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorAsset"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorSearchAsset": {
      "title": "RaptorSearchAsset",
      "description": "All fields will be anded together when filtering for assets",
      "type": "object",
      "properties": {
        "matchAll": {
          "description": "All passed in fields will be included when searching for mathcing assets",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "matchAny": {
          "description": "All fields will be ored together when filtering for assets",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAssetThirdPartyReferences": {
      "title": "RaptorAssetThirdPartyReferences",
      "description": "Wellknown or Custom Third Party Ids used on Assets for referencing thirdparty systems. Please Use Recommending Naming Convention {Application}_{CustomField}",
      "type": "object",
      "properties": {
        "MusicPointID": {
          "description": "WellKnown Third Party ID, used to store MusicPoint ID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "MediabaseID": {
          "description": "WellKnown ID Third Party ID, used to store MediaBase ID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "IHM_ProductID": {
          "description": "WellKnown ID Third Party ID, used to store IHM_ProductID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SiteCode": {
          "description": "WellKnown ID Third Party ID, used to store a Site Code for multiple markets assets",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ExternalID": {
          "description": "Proposed WellKnown ID Third Party ID, used to store generic ExternalID shared by many application",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Zetta_MD5": {
          "description": "Proposed WellKnown ID Third Party ID, used to store Zetta File MD5 for Zetta Offsite backup and Content Management Replication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "GSelector_MediaID": {
          "description": "Proposed WellKnown ID Third Party ID, GSelector Media ID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorAssetFTPIngest": {
      "title": "RaptorAssetFTPIngest",
      "description": "Sub-Document for FTP Ingest",
      "type": "object",
      "properties": {
        "FTPFileName": {
          "description": "The name of the file the way it was in the FTP.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FTPLastModifiedDateTime": {
          "description": "The last modified date time informed in the FTP metadata, the last job execution when FTPFileName is different. (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAssetCustomFields": {
      "title": "RaptorAssetCustomFields",
      "description": "Wellknown or Custom Fields used on Assets.",
      "type": "object",
      "properties": {
        "Coop": {
          "description": "Used to store Coop value",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SpotCategory": {
          "description": "Used to store Spot Category",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorAssetType": {
      "title": "RaptorAssetType",
      "description": "Asset Type, belonging to an organization",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "AssetTypeID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original AssetTypeID this one was created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "asset type description",
          "type": "string"
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "SequenceNumber": {
          "description": "Order of asset types",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Icon": {
          "description": "SemanticUI Icon string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Color": {
          "description": "CSS Hexadecimal Color string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SupportedChainTypes": {
          "title": "SupportedChainTypes",
          "description": "Chain types that are selectable for this type",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumEventChainType"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Recordable": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumAssetTypeRecordable"
            },
            {
              "type": "null"
            }
          ]
        },
        "AutoFades": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumAssetTypeAutoFades"
            },
            {
              "type": "null"
            }
          ]
        },
        "AutoFadeOtherTypes": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumAssetTypeAutoFadeOtherTypes"
            },
            {
              "type": "null"
            }
          ]
        },
        "KillDateTimeOffset": {
          "description": "Default kill datetime when assets in this type are created",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "GSelectorAssetType": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumGSelectorAssetType"
            },
            {
              "type": "null"
            }
          ]
        },
        "AnalysisSettings": {
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAnalysisSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "RecordableSettings": {
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorRecordableSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "MusicSearchSources": {
          "description": "Music Source keys associated with the asset type",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "SpecificFields": {
          "description": "Specific Fields associated with the asset type",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorAssetTypeSpecificField"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "EnableFtpIngest": {
          "description": "When set to true will display TFP Ingest teab in Asset Card for the given AssetType",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "QuickRecord": {
          "description": "Quick Record",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "EnforceStationActivation": {
          "description": "When set to true will display Enforce Station Activation in Asset Card for the given AssetType",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "WellKnownAssetType": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumWellKnownAssetType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAssetTypeSpecificField": {
      "title": "RaptorAssetTypeSpecificField",
      "description": "Asset Specific Field, belonging to an asset type",
      "type": "object",
      "properties": {
        "Name": {
          "description": "field name",
          "type": "string"
        },
        "Scope": {
          "$ref": "#/definitions/EnumAssetFieldScope"
        },
        "FieldType": {
          "description": "field type",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumAssetFieldType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementRequest": {
      "title": "RaptorAPIContentManagementRequest",
      "description": "content management request object",
      "type": "object",
      "properties": {
        "BucketFilepath": {
          "description": "Used for access to organization bucket files..",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "RelativeFilepath": {
          "description": "Relative File, in the backup content managment folder",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "NewRelativeFilepath": {
          "description": "new (renamed) file name, in the backup content managment folder",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetID": {
          "description": "asset unique id",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementFileInfoResponse": {
      "title": "RaptorAPIContentManagementFileInfoResponse",
      "description": "Query file properites on an asset or relative file",
      "type": "object",
      "properties": {
        "Filename": {
          "description": "file name",
          "type": "string"
        },
        "Filesize": {
          "description": "file size in bytes (int64)",
          "type": "integer",
          "format": "int64"
        },
        "MD5": {
          "description": "file name",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementFileStoreInfoResponse": {
      "title": "RaptorAPIContentManagementFileStoreInfoResponse",
      "description": "Returns statics on the File Store",
      "type": "object",
      "properties": {
        "FileCount": {
          "description": "Number of files in the store",
          "type": "integer",
          "format": "int64"
        },
        "StorePath": {
          "description": "Mount or Path to the store",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StoreSpace": {
          "description": "Total space available for this store, in bytes",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "FreeSpace": {
          "description": "Total space available for this store, in bytes",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "UsedSpace": {
          "description": "Total bytes being used on the store",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementFindFileResponse": {
      "title": "RaptorAPIContentManagementFindFileResponse",
      "description": "Return a list of relative files found on the store path being queried.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementUploadResponse": {
      "title": "RaptorAPIContentManagementUploadResponse",
      "description": "Response from Content Management initalizeupload API Call, with RaptorAWSS3Response",
      "type": "object",
      "properties": {
        "url": {
          "description": "content management upload url",
          "type": "string"
        },
        "fields": {
          "description": "AWS S3 presigned url Credentials",
          "$ref": "#/definitions/RaptorAWSS3Response"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIContentManagementDownloadResponse": {
      "title": "RaptorAPIContentManagementDownloadResponse",
      "description": "Response from Content Management initalizeupload API Call with download url",
      "type": "object",
      "properties": {
        "url": {
          "description": "pre-signed url for downloading file",
          "type": "string"
        },
        "mirrorUrls": {
          "description": "StreamUrls",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorTypeValuePair": {
      "title": "RaptorTypeValuePair (Depreciated 2019-07-01)",
      "description": "Generic Type/Value or Key/Value pair object, using key(IDType)/value(IDValue) pair concept",
      "type": "object",
      "properties": {
        "IDType": {
          "type": "string"
        },
        "IDValue": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorTimedEventOrder": {
      "title": "RaptorTimedEventOrder",
      "description": "Used for ordering Events, required to run recalc on schedule, generally used by sequencer",
      "type": "object",
      "properties": {
        "PlaylistStart": {
          "description": "the start time of the playlist the event is in, using datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventSequenceNumber": {
          "description": "Events sequence number",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventSubSequenceNumber": {
          "description": "Events sub sequencer number if in a block or group",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorETMWindow": {
      "title": "RaptorETMWindow",
      "description": "Used to determine accuracy of an ETM Window",
      "type": "object",
      "properties": {
        "ETMWindow": {
          "description": "TODO",
          "type": "number"
        },
        "EtmWindowLateSeconds": {
          "description": "TODO",
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPICountResponse": {
      "title": "RaptorAPICountResponse",
      "description": "Common responce for count API calls",
      "type": "object",
      "properties": {
        "count": {
          "description": "Count for items requested",
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIMessageResponse": {
      "title": "RaptorAPIMessageResponse",
      "description": "Status response object for many API calls",
      "type": "object",
      "properties": {
        "message": {
          "description": "Message being reported from a API with additional information",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIStationAssetAddOrUpdateErrorMessageResponse": {
      "title": "RaptorAPIStationAssetAddOrUpdateErrorMessageResponse",
      "description": "Error message return from station asset addOrUpdateStationAsset",
      "type": "object",
      "properties": {
        "message": {
          "description": "Message being reported from a API with additional information",
          "type": "string"
        },
        "AssetID": {
          "description": "AssetID",
          "type": "string"
        },
        "StationID": {
          "description": "StationID",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPISyncResponse": {
      "title": "RaptorAPISyncResponse",
      "description": "Status response for sync to future and past events",
      "type": "object",
      "properties": {
        "UpdateCount": {
          "description": "Number of Events updated during sync",
          "type": "number"
        },
        "ErrorCount": {
          "description": "Number of Error during sync",
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "RaptorAPIImportResponse": {
      "title": "RaptorAPIImportResponse",
      "description": "Response from import, with presigned url",
      "type": "object",
      "properties": {
        "jobkey": {
          "description": "(Optional) Zetta Cloud job, related to the import presigned url request",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "url": {
          "description": "import url",
          "type": "string"
        },
        "fields": {
          "description": "AWS S3 presigned url Credentials",
          "$ref": "#/definitions/RaptorAWSS3Response"
        }
      },
      "additionalProperties": false
    },
    "RaptorAWSS3Response": {
      "title": "RaptorAWSS3Response",
      "description": "Status response for uploading a presigned url to an s3 bucket (see amazon createPresignedPost for more information)",
      "type": "object",
      "properties": {
        "key": {
          "description": "filename key being put on s3",
          "type": "string"
        },
        "bucket": {
          "description": "the s3 bucket the file is being uploaded to",
          "type": "string"
        },
        "X-Amz-Algorithm": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        },
        "X-Amz-Credential": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        },
        "X-Amz-Date": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        },
        "X-Amz-Security-Token": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        },
        "Policy": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        },
        "X-Amz-Signature": {
          "description": "defined by amazon (see amazon createPresignedPost for more information)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorXsltTransform": {
      "title": "RaptorXsltTransform",
      "description": "api to apply an xslt transform in station util",
      "type": "object",
      "properties": {
        "xml": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "xslt": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorOverrideDictionary": {
      "title": "RaptorOverrideDictionary",
      "description": "Generic SubDocument used to store custom override mappings",
      "type": "object",
      "properties": {},
      "additionalProperties": true
    },
    "RaptorOverrideAssetTypeDictionary": {
      "title": "RaptorOverrideAssetTypeDictionary",
      "description": "Generic SubDocument of RaptorOverrideAssetTypeSettings objects (See RaptorOverrideAssetTypeSettings object)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorOverrideAssetTypeSettings"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorOverrideAssetTypeSettings": {
      "title": "RaptorOverrideAssetTypeSettings",
      "description": "Subdocument used to track Asset Type settings",
      "type": "object",
      "properties": {
        "PitchPercent": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "DuckedByAssetTypeDictionary": {
          "title": "DuckedByAssetTypeDictionary",
          "description": "Generic SubDocument of RaptorDuckingSettings objects (See RaptorDuckingSettings object), The key is the AssetType causing this asset to be ducked!",
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/definitions/RaptorDuckingSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "additionalProperties": false
    },
    "RaptorDuckingSettings": {
      "title": "RaptorDuckingSettings",
      "description": "Raptor Ducking Settings",
      "type": "object",
      "properties": {
        "Enabled": {
          "description": "Used to enable or disable this ducking setting.",
          "type": "boolean"
        },
        "DuckingLevel": {
          "description": "What Volume Percentage or multiplier to duck the Target Ducking Asset Type by, values between ( 1.0 to 0.0 )",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "DuckStartOffsetInSeconds": {
          "description": "Number of seconds from the start of the ducked by audio to start ducking",
          "type": "number",
          "example": [
            "-1.5 = Start ducking the audio 1.5 seconds before the duck by audio starts playing",
            " 0.5 = Start ducking the audio .5 seconds after the duck by audio has started playing"
          ]
        },
        "DuckEndOffsetInSeconds": {
          "description": "Number of seconds from the end of the ducked by audio to stop ducking",
          "type": "number",
          "example": [
            "-1.0 = Stop ducking the audio 1.0 seconds before the duck by audio stops playing",
            " 1.0 = Stop ducking the audio 1.0 seconds after the duck by audio has stops playing"
          ]
        },
        "FadeDownInSeconds": {
          "description": "Number of seconds it takes to reach the target DuckingLevel, when ducking an audio.",
          "type": "number"
        },
        "FadeUpInSeconds": {
          "description": "Number of seconds it takes to return the ducked audio back to original volume, when finished ducking the audio.",
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "RaptorIcyMetadata": {
      "title": "RaptorIcyMetadata",
      "description": "Wrapper object used to manage Icecast Metadata properties, Used for resolving Icy Metadata Templates",
      "type": "object",
      "properties": {
        "Station": {
          "description": "(READONLY) Station Name - this event is associated with",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorStation"
            },
            {
              "type": "null"
            }
          ]
        },
        "Event": {
          "description": "(READONLY) Event/Asset/Assettype data used for decribing icy metadata",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEvent"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorCluster": {
      "title": "RaptorCluster",
      "description": "Configure primary, secondary (optional) and current cluster",
      "type": "object",
      "properties": {
        "Primary": {
          "description": "Primary cluster region where this station is deployed",
          "type": "string"
        },
        "Secondary": {
          "description": "Failover cluster region where this station is deployed (optional)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Current": {
          "description": "Current cluster region where this station is deployed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorMusicSource": {
      "title": "RaptorMusicSource",
      "description": "Listing for Music Source,  URL for source is configured as value of the property ",
      "type": "object",
      "properties": {
        "MusicPoint": {
          "description": "Details for Music Point Source",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorMusicSourceDictionary": {
      "title": "RaptorMusicSourceDictionary",
      "description": "Generic SubDocument of RaptorMusicSearchSource objects (the key is the MusicSourceKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorMusicSourceConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorMusicSourceConfig": {
      "title": "RaptorMusicSourceConfig",
      "description": "Music Source Configuration based on MusicSourceType enum value",
      "type": "object",
      "properties": {
        "MusicSourceKey": {
          "description": "Unique Key, used to track and identify a specific Raptor MusicSource",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "MusicSourceType": {
          "$ref": "#/definitions/EnumMusicSourceTypes"
        },
        "MusicSourceData": {
          "description": "Music Source data, depends on Music Source type (generally Music Source data need to configure the Music Source, json)",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorOKTAInfo": {
      "title": "RaptorOKTAInfo",
      "description": "OKTA info stored on the organization ",
      "type": "object",
      "properties": {
        "adminGroupID": {
          "description": "org admin group id",
          "type": "string"
        },
        "groupID": {
          "description": "org group id",
          "type": "string"
        },
        "groupRuleID": {
          "description": "group rule id, adds user to the org group (not admin)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorRotation": {
      "title": "RaptorRotation",
      "description": "Rotation Info that is passed to GSelector",
      "type": "object",
      "properties": {
        "shares": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorRotationShares"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorRotationShares": {
      "title": "RaptorRotationShares",
      "description": "Rotation Shares",
      "type": "object",
      "properties": {
        "id": {
          "description": "rotation id with cut",
          "type": "string"
        },
        "percent": {
          "description": "percentage of share",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "RaptorInvoice": {
      "title": "RaptorInvoice",
      "description": "Used to track Raptor requests",
      "type": "object",
      "properties": {
        "InvoiceFrom": {
          "description": "Description of who sent the invoice",
          "type": "string"
        },
        "InvoiceId": {
          "description": "UniqueID of the invoice being tracked",
          "type": "string"
        },
        "InvoiceTopic": {
          "description": "InvoiceTopic",
          "type": "string"
        },
        "InvoiceDescription": {
          "description": "Short description of the invoice",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "RequestReceipt": {
          "description": "If the invoice would like a receipt for the request",
          "type": "boolean",
          "default": true
        },
        "ZeroMQReceipt": {
          "description": "Where to send the RaptorReceipt, if sending over ZeroMQ",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorInvoiceReceipt": {
      "title": "RaptorInvoiceReceipt",
      "description": "Used to track a receipt, to a RaptorInvoice",
      "type": "object",
      "properties": {
        "ReceiptFrom": {
          "description": "Description of who sent the receipt",
          "type": "string"
        },
        "InvoiceId": {
          "description": "Unique ID of the invoice being tracked",
          "type": "string"
        },
        "InvoiceTopic": {
          "description": "InvoiceTopic",
          "type": "string"
        },
        "InvoiceDescription": {
          "description": "Short description of the invoice",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "InvoiceResultData": {
          "description": "invoice result data, depends on invoice topic",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorZMQTopicMessage": {
      "title": "RaptorZMQTopicMessage",
      "description": "The Components to a raptor ZMQ Message",
      "type": "object",
      "properties": {
        "topic": {
          "description": "routing topic for the message",
          "type": "string"
        },
        "body": {
          "description": "(option) Body for the message",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "invoice": {
          "description": "(optional) if the message is using an invoice",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorFlatFileTemplate": {
      "title": "RaptorFlatFileTemplate",
      "description": "Template Object for Flat File",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Template name - Viero, V15 Native",
          "type": "string"
        },
        "FlatfileType": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumFlatFileType"
            },
            {
              "type": "null"
            }
          ]
        },
        "Contents": {
          "description": "XML definition of the template",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorFlatFileTemplateArray": {
      "title": "RaptorFlatFileTemplateArray",
      "description": "represents an array of RaptorFlatFileTemplate",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorFlatFileTemplate"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorMessageResponse": {
      "title": "RaptorMessageResponse",
      "description": "Status response object for many calls",
      "type": "object",
      "properties": {
        "StatusCode": {
          "description": "Status Code for response",
          "type": "integer"
        },
        "Message": {
          "description": "Message being reported",
          "type": "string"
        },
        "AdditionalData": {
          "description": "Additional data for the job result",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorDBNotifyMessage": {
      "title": "RaptorDBNotify",
      "description": "Raptor Notification Message use to Notify of API Object Changes, allowing them to be re-pulled for latest datasets",
      "type": "object",
      "properties": {
        "EventTimeStamp": {
          "description": "when the object change occurred, using datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        },
        "TableName": {
          "description": "The name of object that changed",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumDBNotifyTables"
            }
          ]
        },
        "Actions": {
          "description": "The name of object that changed",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumDBNotifyActions"
            }
          ]
        },
        "Data": {
          "description": "Json Object describing the change, the returned object is a reflection of the TableName ",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEvent"
            },
            {
              "$ref": "#/definitions/RaptorPlaylist"
            },
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "$ref": "#/definitions/RaptorAssetType"
            },
            {
              "$ref": "#/definitions/RaptorStation"
            },
            {
              "$ref": "#/definitions/RaptorOrganization"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EnumDBNotifyTables": {
      "title": "EnumDBNotifyTables",
      "description": "Type of change actions that occured on the API Object",
      "type": "string",
      "enum": [
        "Asset",
        "AssetType",
        "Event",
        "Organization",
        "Playlist",
        "Station"
      ]
    },
    "EnumDBNotifyActions": {
      "title": "EnumDBNotifyActions",
      "description": "Type of change actions that occured on the API Object",
      "type": "string",
      "enum": [
        "Modify",
        "Add",
        "Delete"
      ]
    },
    "RaptorEnums": {
      "title": "RaptorEnums",
      "description": "Complete list of raptor enums, for code",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "EnumLoggingLevel": {
          "$ref": "#/definitions/EnumLoggingLevel"
        },
        "EnumLoggingFormat": {
          "$ref": "#/definitions/EnumLoggingFormat"
        },
        "EnumLoggingBookmark": {
          "$ref": "#/definitions/EnumLoggingBookmark"
        },
        "EnumPOIType": {
          "$ref": "#/definitions/EnumPOIType"
        },
        "EnumHealthCheckStatus": {
          "$ref": "#/definitions/EnumHealthCheckStatus"
        },
        "EnumPlaybackState": {
          "$ref": "#/definitions/EnumPlaybackState"
        },
        "EnumPlaybackActionEvent": {
          "$ref": "#/definitions/EnumPlaybackActionEvent"
        },
        "EnumPlaybackOutputType": {
          "$ref": "#/definitions/EnumPlaybackOutputType"
        },
        "EnumPlaybackInputType": {
          "$ref": "#/definitions/EnumPlaybackInputType"
        },
        "EnumPlaybackFormat": {
          "$ref": "#/definitions/EnumPlaybackFormat"
        },
        "EnumEventType": {
          "$ref": "#/definitions/EnumEventType"
        },
        "EnumEventChainType": {
          "$ref": "#/definitions/EnumEventChainType"
        },
        "EnumEventStatusCode": {
          "$ref": "#/definitions/EnumEventStatusCode"
        },
        "EnumEventEditCode": {
          "$ref": "#/definitions/EnumEventEditCode"
        },
        "EnumSkipType": {
          "$ref": "#/definitions/EnumSkipType"
        },
        "EnumEventErrorCode": {
          "$ref": "#/definitions/EnumEventErrorCode"
        },
        "EnumEventVerifyCode": {
          "$ref": "#/definitions/EnumEventVerifyCode"
        },
        "EnumEventETMType": {
          "$ref": "#/definitions/EnumEventETMType"
        },
        "EnumEventResyncType": {
          "$ref": "#/definitions/EnumEventResyncType"
        },
        "EnumEventTriggerType": {
          "$ref": "#/definitions/EnumEventTriggerType"
        },
        "EnumEventBacktimingType": {
          "$ref": "#/definitions/EnumEventBacktimingType"
        },
        "EnumEventRecueType": {
          "$ref": "#/definitions/EnumEventRecueType"
        },
        "EnumEventCuedStopStatus": {
          "$ref": "#/definitions/EnumEventCuedStopStatus"
        },
        "EnumAssetTypeRecordable": {
          "$ref": "#/definitions/EnumAssetTypeRecordable"
        },
        "EnumAssetTypeAutoFades": {
          "$ref": "#/definitions/EnumAssetTypeAutoFades"
        },
        "EnumAssetTypeAutoFadeOtherTypes": {
          "$ref": "#/definitions/EnumAssetTypeAutoFadeOtherTypes"
        },
        "EnumSequencerMode": {
          "$ref": "#/definitions/EnumSequencerMode"
        },
        "EnumSequencerRole": {
          "$ref": "#/definitions/EnumSequencerRole"
        },
        "EnumSequencerStatus": {
          "$ref": "#/definitions/EnumSequencerStatus"
        },
        "EnumSequencerAutoFade": {
          "$ref": "#/definitions/EnumSequencerAutoFade"
        },
        "EnumMetricMsgStatus": {
          "$ref": "#/definitions/EnumMetricMsgStatus"
        },
        "EnumMetricMsgTransport": {
          "$ref": "#/definitions/EnumMetricMsgTransport"
        },
        "EnumMetricMsgMethod": {
          "$ref": "#/definitions/EnumMetricMsgMethod"
        },
        "EnumPlaylistType": {
          "$ref": "#/definitions/EnumPlaylistType"
        },
        "EnumPlaylistState": {
          "$ref": "#/definitions/EnumPlaylistState"
        },
        "EnumStationConfigStatus": {
          "$ref": "#/definitions/EnumStationConfigStatus"
        },
        "EnumZettaSplitReceiver": {
          "$ref": "#/definitions/EnumZettaSplitReceiver"
        }
      },
      "additionalProperties": false
    },
    "EnumLoggingLevel": {
      "title": "EnumLoggingLevel",
      "description": "Enum Flags - used to track debug logging levels (flags)",
      "type": [
        "integer"
      ],
      "enum": [
        0,
        1,
        4,
        16,
        64,
        256,
        1024,
        4096,
        16384,
        65280,
        65520,
        65535
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Invalid",
        "DevOnly",
        "Debugging",
        "Diagnostic",
        "Information",
        "Warning",
        "Error",
        "Critical",
        "Required",
        "Mask_ErrorsAndWarnings",
        "Mask_Normal",
        "Mask_All"
      ],
      "examples": [
        "[0x0000] 0 = Invalid",
        "[0x0001] 1 = DevOnly",
        "[0x0004] 4 = Debugging",
        "[0x0010] 16 = Diagnostic",
        "[0x0040] 64 = Information",
        "[0x0100] 256 = Warning",
        "[0x0400] 1024 = Error",
        "[0x1000] 4096 = Critical",
        "[0x4000] 16384 = Required",
        "[0xFF00] 65280 = Mask_ErrorsAndWarnings",
        "[0xFFF0] 65520 = Mask_Normal",
        "[0xFFFF] 65535 = Mask_All"
      ]
    },
    "EnumLoggingFormat": {
      "title": "EnumLoggingFormat",
      "description": "Enum Flags - used to configure what logging format should be used when written Logging messages",
      "type": [
        "integer"
      ],
      "enum": [
        0,
        1,
        2,
        4,
        32768
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Invalid",
        "Text",
        "XML",
        "JSON",
        "Threaded"
      ],
      "examples": [
        "[0x0000] 0 = Invalid",
        "[0x0001] 1 = Text, Write logging message as plain text",
        "[0x0002] 2 = XML, Write logging message in XML format",
        "[0x0004] 4 = JSON, Write logging message in JSON format",
        "[0x8000] ‭32768‬ = Threaded, Flag Used to configure logger to use a log thread or inline when logging messages"
      ]
    },
    "EnumLoggingBookmark": {
      "title": "EnumLoggingBookmark",
      "description": "Enum Flags - Used to tag and group user bookmarks",
      "type": [
        "integer"
      ],
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Invalid",
        "Red",
        "Blue",
        "Green",
        "Orange",
        "Violet",
        "Yellow",
        "Cyan",
        "Magenta"
      ],
      "examples": [
        "[0x0000] 0 = Invalid",
        "[0x0001] 1 = Red",
        "[0x0002] 2 = Blue",
        "[0x0004] 4 = Green",
        "[0x0008] 8 = Orange",
        "[0x0010] 16 = Violet",
        "[0x0020] 32 = Yellow",
        "[0x0040] 64 = Cyan",
        "[0x0080] 128 = Magenta"
      ]
    },
    "EnumPOIType": {
      "title": "EnumPOIType",
      "description": "Enum - Point of Interest Marker Types",
      "type": "integer",
      "enum": [
        0,
        100,
        101,
        102,
        103,
        104,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        301,
        302,
        1000,
        1001
      ],
      "x-enumNames": [
        "Invalid",
        "POITrigger",
        "POIFadeIn",
        "POIFadeOut",
        "POISegue",
        "POIEarlySegue",
        "POIIntro",
        "POIOutro",
        "POIVolume",
        "POIPitchless",
        "POIPitched",
        "POICastTitle",
        "POICastMetadata",
        "POIScheduledStart",
        "POIPlaySpotBlock",
        "POIPlayNetworkSpotBlock",
        "POIPlayTag",
        "POIShowSilenceStart",
        "POIShowSilenceEnd",
        "POIAutoGeneratedAutoFade",
        "POIAutoGeneratedEndOfMarkup",
        "POIAutoGeneratedGain",
        "POIAutoGeneratedDucking",
        "POIAutoGeneratedFader",
        "POIAutoGeneratedSpotBlockStart",
        "POIAutoGeneratedSpotBlockEnd",
        "POIAutoGeneratedEASTest",
        "POIRealtimeEventStart",
        "POIRealtimeEventEnd",
        "POIUser",
        "POIPlayer"
      ],
      "examples": [
        "0 = Invalid ,  description :  Invalid or undefined Point of Interest Marker",
        "100 = POITrigger , description :  Uses Parameters: (Position, ParamString), File Position when to Signal another Input to start playing. ParamString to identify what input to trigger), Common Syntax: TriggerInput@{inputkey}",
        "101 = POIFadeIn ,  description :  Uses Parameters: (Position, Duration) , File Position to start the audio playing from. Duration of how long to fade in the audio. BOF = Position",
        "102 = POIFadeOut ,  description :  Uses Parameters: (Position, Duration) , File Position to start the audio Fading out, Duration of how long to fade out the audio.  EOF = Position + Duration",
        "103 = POISegue ,  description :  Uses Parameters: (Position, ParamDouble) File Position to start the audio, OR ParamDouble is the offset from the end of the playback to signal the next file to start ",
        "104 = POIEarlySegue ,  description :  Uses Parameters: (Position, ParamDouble ) Generally when the chain type is Link-Song, use the File Position to start the audio, OR ParamDouble is the offset from the end of the playback to signal the next file to start ",
        "106 = POIIntro ,  description :  Uses Parameters: (Position) File Position where an intro occurs, stack these marker to have multiple intros",
        "107 = POIOutro ,  description :  Uses Parameters: (Position) File Position where an outro occurs, stack these marker to have multiple outro",
        "108 = POIVolume ,  description :  Uses Parameters: (Position, ParamDouble) File Position where an Volume change occurs, ParamDouble is the new volume level",
        "109 = POIPitchless ,  description :  Uses Parameters:(Position, ParamDouble) File Position where to adjustment occurs, ParamDouble Adjust the pitchless playrate. Normally there is only one Marker at Position 0.0",
        "110 = POIPitched ,  description :  Uses Parameters:(Position, ParamDouble) File Position where to adjustment occurs, ParamDouble Adjust the pitched playrate. Normally there is only one Marker at Position 0.0",
        "111 = POICastTitle , description :  Uses Parameters:(Position, ParamString) File Position where to adjustment occurs, ParamString Adjust the Casting title. Normally there is only one Marker at Position 0.0",
        "112 = POICastMetadata , description :  Uses Parameters:(Position, ParamString) File Position where to adjustment occurs, ParamString Adjust the Casting Metadata. Normally there is only one Marker at Position 0.0",
        "113 = POIScheduledStart , description :  Uses Parameters:(Position, ParamString) File Position where to start playing from, ParamString is the scheduled start time as an datetime (ISO8601)",
        "114 = POIPlaySpotBlock , description :  Uses Parameters:(Position) File Position where to start playing the next spot block in the log",
        "115 = POIPlayNetworkSpotBlock , description :  Uses Parameters:(Position) File Position where to start playing the next network spot block in the log",
        "116 = POIPlayTag , description :  Uses Parameters:(Position, ParamString) File Position where to start playing the next matching tag event in the log",
        "117 = POIShowSilenceStart , description :  Uses Parameters:(Position) File Position where show management lost connectivity and auto generated silence",
        "118 = POIShowSilenceEnd , description :  Uses Parameters:(Position) File Position where show management resumed connectivity to show recording and ended auto generated silence",
        "200 = POIAutoGeneratedAutoFade ,  description :  Uses Parameters:(Position, Duration, ParamDouble), File Position where to start and auto fade, Duration, stores how long until EOF, ParamDouble stores how long the auto fade out is",
        "201 = POIAutoGeneratedEndOfMarkup ,  description :  Uses Parameters:(Position): File Position where the audio should no longer be played ",
        "202 = POIAutoGeneratedGain, description : Uses (Position, ParamDouble) File Position where the audio gain should be applied Normally alway 0.0, ParamDouble contains the gain we need apply to the audio.",
        "203 = POIAutoGeneratedDucking, description: Uses(Position, Duration, POIVolume Array) contains an array of volume points to control the audio level",
        "204 = POIAutoGeneratedAutoGeneratedFader,  description: Uses (Postion, Duration, ParamDouble): File Position used to start a Volume Fading from current volume to a new target Level(ParamDouble) volume over some time.",
        "205 = POIAutoGeneratedSpotBlockStart, description: Uses(Position, Duration, ParamString) spot block start",
        "206 = POIAutoGeneratedSpotBlockEnd,  description: Uses (Postion, ParamString): spot block end.",
        "207 = POIAutoGeneratedEASTest, description: triggers the player assigned eas box to play an eas test",
        "301 = POIRealtimeEventStart, description: Uses(Position, Duration, ParamString) event start",
        "302 = POIRealtimeEventEnd,  description: Uses (Postion, ParamString): event end.",
        "1000 = POIUser ,  description :  Uses Parameters:(Position, Optional): User defined POI Marker, Params should contain extra user data",
        "1001 = POIPlayer ,  description :  Internal RCS Player Event tracking marker"
      ]
    },
    "EnumHealthCheckStatus": {
      "title": "EnumHealthCheckStatus",
      "description": "Enum - Returned from API Health Checks",
      "type": "integer",
      "enum": [
        0,
        1,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "Healthy",
        "FailedToReadStation"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Healthy",
        "4 = FailedToReadStation"
      ]
    },
    "EnumPlaybackState": {
      "title": "EnumPlaybackState",
      "description": "Enum - playback input state (play, paused, stopped)",
      "type": "integer",
      "enum": [
        0,
        3,
        4,
        5
      ],
      "x-enumNames": [
        "Invalid",
        "Stopped",
        "Paused",
        "Playing"
      ],
      "examples": [
        "0 = Invalid",
        "3 = Stopped, Input path is in a stopped state",
        "4 = Paused, Input path is in a paused state",
        "5 = Playing, Input path is in a playing state"
      ]
    },
    "EnumPlaybackActionEvent": {
      "title": "EnumPlaybackActionEvent",
      "description": "Enum - playback action event  to occur on the input (load, play, paused, stopped, completed, unload)",
      "type": "integer",
      "enum": [
        -2,
        -1,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "x-enumNames": [
        "Error_Transcoding",
        "Error_Loading",
        "Invalid",
        "Unloaded",
        "Loaded",
        "Stopped",
        "Paused",
        "Playing",
        "Completed",
        "Refresh",
        "Update",
        "Caching"
      ],
      "examples": [
        "-2 = Error_Transcoding, Error occurred transcoding the player stream",
        "-1 = Error_Loading, Error occurred loading the player stream",
        "0 = Invalid",
        "1 = Unloaded, The Input was released from the player",
        "2 = Loaded, A new input was created on the player",
        "3 = Stopped, Input path is in a stopped state",
        "4 = Paused, Input path is in a paused state",
        "5 = Playing, Input path is in a playing state",
        "6 = Completed, All markup was done as requested",
        "7 = Refresh, Refresh data, used for notifying of progress",
        "8 = Update, Special Action Event that is used during a publish to push changes to an input, player will always send an NotifySnapshotInputChanged event",
        "9 = Caching, Special Action Event used to identify that the player is trying to locally cache content."
      ]
    },
    "EnumPlaybackAfterCompleted": {
      "title": "EnumPlaybackAfterCompleted",
      "description": "Enum - What should the playback system do after an input has completed playback",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "AutoUnload",
        "AutoExpire"
      ],
      "examples": [
        "0 = Invalid, Do Nothing, there is no followup operation that needs to take playse",
        "1 = AutoUnload, The system will auto unload the input",
        "2 = AutoExpire, The system will change the inputs expire time allowing it to remain loaded after completed. And expire logic will remove it if NO unload is called."
      ]
    },
    "EnumPlayerPurpose": {
      "title": "EnumPlayerPurpose",
      "description": "Enum - What is the primary method used to control this player, player messaging control",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Primary",
        "Hotspare",
        "Anonymous"
      ],
      "examples": [
        "0 = Invalid, Player has been disabled, but allows us to keep the configuration",
        "1 = Primary, Sequencer requires communication with all players in the group, for this reason each primary player should have its own player group.",
        "2 = Hotsparing, Sequencer tracks and monitor the hotspare placer..",
        "3 = Anonymous, Control of the player is done asynchronous, player is anonymous and not tracked by the sequencer, Should NOT be registered with the sequencer for tracking"
      ]
    },
    "EnumPlayerControlType": {
      "title": "EnumPlayerControlType",
      "description": "Enum - sequencer to player messaging control",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "ZeroMQ",
        "RestAPI"
      ],
      "examples": [
        "0 = Invalid",
        "1 = ZeroMQ, Control of the mixer is done through asynchronous ZeroMQ Message",
        "2 = RestAPI, Control of the mixer is done through synchronous Rest API Message"
      ]
    },
    "EnumPlayerDeploymentType": {
      "title": "EnumPlayerDeploymentType",
      "description": "Enum - Different Type of Player Technology Deployments",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "x-enumNames": [
        "Invalid",
        "Kubernetes",
        "Sound4",
        "RaspberryPi",
        "AudioScience",
        "Barix",
        "Fluo",
        "Edge"
      ],
      "examples": [
        "0 = Invalid, Generic Player Deployment",
        "1 = Kubernetes, Kubernetes Cloud Deployment",
        "2 = Sound4, Sound4 Device Deployment, OBSOLETE: Replaced by EdgeDevice Enum, and EdgeDevice API",
        "3 = RaspberryPi, Raspberry Pi Device Deployment, OBSOLETE: Replaced by EdgeDevice Enum, and EdgeDevice API",
        "4 = AudioScience, AudioScience Device Deployment, OBSOLETE: Replaced by EdgeDevice Enum, and EdgeDevice API",
        "5 = Barix, Barix Device Deployment, OBSOLETE: Replaced by EdgeDevice Enum, and EdgeDevice API",
        "6 = Fluo, Revma ZCloud Fluo Player",
        "7 = Edge Device, Used to denote an Edge Device Deployment see EdgeDevice API"
      ]
    },
    "EnumPlaybackOutputType": {
      "title": "EnumPlaybackOutputType",
      "description": "Enum - playback output types (device type)",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "BassNative",
        "BassShoutcastServer",
        "BassShoutcastClient",
        "BassTCPClient"
      ],
      "examples": [
        "0 = Invalid",
        "1 = BassNative, Bass Local OS Native device",
        "2 = BassShoutcastServer, Device is Bass Shoutcast Server",
        "3 = BassShoutcastClient, Device is Bass Shoutcast Client",
        "4 = BassTCPClient, Prototype for TCP streaming output"
      ]
    },
    "EnumPlaybackInputType": {
      "title": "EnumPlaybackInputType",
      "description": "Enum - playback input types (input source)",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "BassInternetFile",
        "BassRealtimeStream",
        "BassFile",
        "Live"
      ],
      "examples": [
        "0 = Invalid",
        "1 = BassInternetFile, Bass Internet Url/file with KNOWN length",
        "2 = BassRealtimeStream, Bass Streaming Url with UNKNOWN length",
        "3 = BassFile, Bass local/network File with KNOWN length ",
        "4 = Live, Event is live, player will play silence to simulate"
      ]
    },
    "EnumPlaybackFormat": {
      "title": "EnumPlaybackFormat",
      "description": "Enum - playback output format (mime type)",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "x-enumNames": [
        "Invalid",
        "OGG",
        "OPUS",
        "MP3",
        "FLAC",
        "AAC",
        "WAV"
      ],
      "examples": [
        "0 = Invalid",
        "1 = OGG, OGG Encoding (audio/ogg)",
        "2 = OPUS, Opus Encoding (audio/ogg)",
        "3 = MP3, MP3 Encoding (audio/mp3)",
        "4 = FLAC, FLAC Encoding (audio/flac)",
        "5 = AAC, AAC Encoding (audio/aac)",
        "6 = WAV, PCM Encoding (audio/wav)"
      ]
    },
    "EnumAudioAlertFlags": {
      "title": "EnumAudioAlertFlags",
      "description": "Enum - Audio Alerts, Channel Left/Right, High/Low",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        265,
        512
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Invalid",
        "Left",
        "Right",
        "High",
        "Low"
      ],
      "examples": [
        "[0x0000], 0 = Invalid ",
        "[0x0001], 1 = Left",
        "[0x0002], 2 = Right",
        "[0x0100], 256 = High Alert",
        "[0x0200], 512 = Low Alert"
      ]
    },
    "EnumEventType": {
      "title": "EnumEventType",
      "description": "Enum - Playlist Event Types",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        6,
        11,
        12,
        13,
        14
      ],
      "x-enumNames": [
        "InvalidEvent",
        "PlayAssetEvent",
        "SpotBlockEvent",
        "ExactTimeMarkerEvent",
        "CommentEvent",
        "NoteEvent",
        "TrafficLoadPOS",
        "SequencerStart",
        "BlockFillPOS"
      ],
      "examples": [
        "0 = InvalidEvent",
        "1 = PlayAssetEvent",
        "2 = SpotBlockEvent",
        "3 = ExactTimeMarkerEvent",
        "6 = CommentEvent",
        "11 = NoteEvent",
        "12 - TrafficLoadPOS",
        "13 - SequencerStart",
        "14 - BlockFillPOS"
      ]
    },
    "EnumEventChainType": {
      "title": "EnumEventChainType",
      "description": "Enum - Sequencer Chain types",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "SegueChain",
        "AutoPostChain",
        "StopChain",
        "LinkSongChain"
      ],
      "examples": [
        "0 = Invalid",
        "1 = SegueChain",
        "2 = AutoPostChain",
        "3 = StopChain",
        "4 = LinkSongChain"
      ]
    },
    "EnumEventStatusCode": {
      "title": "EnumEventStatusCode",
      "description": "Enum - Playlist Event Status Code",
      "type": "integer",
      "enum": [
        -4,
        -3,
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "x-enumNames": [
        "PendingNotPlayed",
        "PendingPlayed",
        "Invalid",
        "Ready",
        "Current",
        "Played",
        "NotPlayed",
        "EventError",
        "Paused"
      ],
      "examples": [
        "-4 = PendingNotPlayed",
        "-3 = PendingPlayed",
        "0 = Invalid",
        "1 = Ready",
        "2 = Current",
        "3 = Played",
        "4 = NotPlayed",
        "5 = EventError",
        "6 = Paused"
      ]
    },
    "EnumEventEditCode": {
      "title": "EnumEventEditCode",
      "description": "Enum - Playlist Event Edit Code, last edit that was made on the event",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "x-enumNames": [
        "Invalid",
        "EtmFillInserted",
        "BlockFillInserted",
        "EmergencyPlaylistInserted",
        "ManualSkip",
        "ManualInsert",
        "ManualEdit",
        "ManualReorder",
        "EmergencyFillInserted"
      ],
      "examples": [
        "0 = Invalid",
        "1 = EtmFillInserted",
        "2 = BlockFillInserted",
        "3 = EmergencyPlaylistInserted",
        "4 = Manual Skip",
        "5 = Manual Insert",
        "6 = Manual Edit",
        "7 = Manual Reorder",
        "8 = Emergency Fill Inserted"
      ]
    },
    "EnumSkipType": {
      "title": "EnumSkipType",
      "description": "Enum - Playlist Skip Type Code, list of reasons why a spot is skipped",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "x-enumNames": [
        "Invalid",
        "ClientRequest",
        "Emergency",
        "IncorrectCopy",
        "EventChange",
        "RecentNewsEvent",
        "Other"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Client Request",
        "2 = Emergency (weather, fire, community emergency)",
        "3 = Incorrect Copy(and use text field for what)",
        "4 = Event Change (Sports rain out, cancellation, etc)",
        "5 = Recent News Event",
        "6 = Other Unlisted"
      ]
    },
    "EnumEventErrorCode": {
      "title": "EnumEventErrorCode",
      "description": "Enum - Playlist Event Error Code, last error that occurred on the event",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "x-enumNames": [
        "Invalid",
        "FutureItemPlayed",
        "EtmDropped",
        "UnsupportedEvent",
        "StoppedEarly",
        "ExpiredOnStartup",
        "AssetNotDefined",
        "AssetFilePathNotDefined",
        "PlayerLoadError",
        "SyncToSelectionPast",
        "SyncToSelectionFuture",
        "ParentEventStopped",
        "NoAvailableStreams",
        "SplitStoppedWithoutPlaying",
        "NotActive",
        "InvalidStationAssetStartDate",
        "InvalidStationAssetEndDate",
        "InvalidAssetKillDate",
        "NoGeneratedFilePath",
        "InvalidAssetReleaseDate",
        "UnPlayedShowEvent",
        "InvalidAssetEndDate",
        "UnplayableEdgeOffline"
      ],
      "examples": [
        "0 = Invalid",
        "1 = FutureItemPlayed, Item was not played because a future item was started and stopped this one",
        "2 = EtmDropped, Sequencer - Event dropped due to (execution of) future ETM",
        "3 = UnsupportedEvent",
        "4 = StoppedEarly",
        "5 = ExpiredOnStartup",
        "6 = AssetNotDefined",
        "7 = AssetFilePathNotDefined",
        "8 = PlayerLoadError",
        "9 = SyncToSelectionPast",
        "10 = SyncToSelectionFuture",
        "11 = ParentEventStopped",
        "12 = NoAvailableStreams",
        "13 = SplitStoppedWithoutPlaying",
        "14 = Not Active",
        "15 = InvalidStationAssetStartDate",
        "16 = InvalidStationAssetEndDate",
        "17 = InvalidAssetKillDate",
        "18 = NoGeneratedFilePath",
        "19 = InvalidAssetReleaseDate",
        "20 - UnplayedShowEvent",
        "21 = InvalidAssetEndDate",
        "22 = Unplayable Edge Offline"
      ]
    },
    "EnumEventVerifyCode": {
      "title": "EnumEventVerifyCode",
      "description": "Enum - Playlist Event Verify Code, used to report verification errors and warnings",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        256,
        512
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Invalid",
        "NoAssetID",
        "NoFilePath",
        "PlayerLoadError",
        "NotActive",
        "InvalidStationAssetStartDate",
        "InvalidStationAssetEndDate",
        "InvalidAssetKillDate",
        "NoGeneratedFilePath",
        "InvalidAssetReleaseDate",
        "InvalidAssetEndDate"
      ],
      "examples": [
        "[0x0000], 0 = Invalid",
        "[0x0001], 1 = NoAssetID, No asset defined on event",
        "[0x0002], 2 = NoFilePath, No file path defined on asset",
        "[0x0004], 4 = PlayerLoadError, Event failed to load into player",
        "[0x0008], 8 = Not active for the current station",
        "[0x0010], 16 = Invalid Station Asset start date",
        "[0x0020], 32 = Invalid Station Asset end date",
        "[0x0040], 64 = Invalid Asset kill date",
        "[0x0080], 128 = NoGeneratedFilePath",
        "[0x0100], 256 = Invalid Asset Release Date",
        "[0x0200], 512 = Invalid Asset End Date"
      ]
    },
    "EnumEventETMType": {
      "title": "EnumEventETMType",
      "description": "Enum - Playlist Event ETM Type",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "HardETM",
        "SoftETM",
        "ResetETM",
        "HitETM"
      ],
      "examples": [
        "0 = Invalid",
        "1 = HardETM",
        "2 = SoftETM",
        "3 = ResetETM",
        "4 = HitETM"
      ]
    },
    "EnumEventResyncType": {
      "title": "EnumEventResyncType",
      "description": "Enum - Playlist Event Resync Type",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "None",
        "Partial",
        "Full"
      ],
      "examples": [
        "0 = Invalid",
        "1 = None",
        "2 = Partial",
        "3 = Full"
      ]
    },
    "EnumEventTriggerType": {
      "title": "EnumEventTriggerType",
      "description": "Enum - Playlist Event Trigger Type, used to determine what component should trigger playback of the event",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "PlayerTrigger",
        "ScheduledTrigger",
        "ManualTrigger"
      ],
      "examples": [
        "0 = Invalid",
        "1 = PlayerTrigger, Internally on player input stream, will trigger another input stream based upon POI Markers",
        "2 = ScheduledTrigger, The event will be started based upon scheduled timestamps",
        "3 = ManualTrigger, The event will be started manually by a user"
      ]
    },
    "EnumEventBacktimingType": {
      "title": "EnumEventBacktimingType",
      "description": "Enum - Playlist Event Backtiming Type",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Over",
        "Under",
        "Closest"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Over",
        "2 = Under",
        "3 = Closest"
      ]
    },
    "EnumEventRecueType": {
      "title": "EnumEventRecueType",
      "description": "Enum - Playlist Event Requeue Type, used to determine rules on when to Requeue a event that has not been played",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Percentage",
        "PlayedLength"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Percentage",
        "2 = PlayedLength"
      ]
    },
    "EnumEventCuedStopStatus": {
      "title": "EnumEventCuedStopStatus",
      "description": "TODO",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Played",
        "NotPlayed"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Played",
        "2 = NotPlayed"
      ]
    },
    "EnumAssetTypeRecordable": {
      "description": "Can this type be recorded into in the voice track editor, ex) voice tracks",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "Recordable"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Recordable"
      ]
    },
    "EnumAssetTypeAutoFades": {
      "title": "EnumAutoFades",
      "description": "Can this assettype be auto faded by other asset assettype",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "AutoFades"
      ],
      "examples": [
        "0 = Invalid",
        "1 = AutoFades"
      ]
    },
    "EnumAssetTypeAutoFadeOtherTypes": {
      "title": "EnumAutoFadeOtherTypes",
      "description": "Does this assettype type cause other assettypes that can be faded to be faded",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "AutoFadeOtherTypes"
      ],
      "examples": [
        "0 = Invalid",
        "1 = AutoFadeOtherTypes"
      ]
    },
    "EnumSequencerMode": {
      "title": "EnumSequencerMode",
      "description": "Enumeration - Defining the different modes a sequencer is operating under",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "Auto",
        "Manual",
        "LiveAssist",
        "Split"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Auto",
        "2 = Manual",
        "3 = LiveAssist",
        "4 = Split"
      ]
    },
    "EnumSequencerRole": {
      "title": "EnumSequencerRole",
      "description": "Enumeration - Defining the different roles a sequencer is operating under",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Leader",
        "Standby"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Leader",
        "2 = Standby"
      ]
    },
    "EnumSequencerStatus": {
      "title": "EnumSequencerStatus",
      "description": "Enumeration - Defining the different status a sequencer is operating under",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "x-enumNames": [
        "Invalid",
        "Offline",
        "OnAir",
        "Idle",
        "PlayerOffline",
        "IdlePaused",
        "OnAirPaused"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Offline",
        "2 = OnAir",
        "3 = Idle",
        "4 = PlayerOffline",
        "5 = IdlePaused",
        "6 = OnAirPaused"
      ]
    },
    "EnumSequencerAutoFade": {
      "title": "EnumSequencerAutoFade",
      "description": "Enumeration - used to determine if we autofade in sequencer",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "AutoFadeEnabled"
      ],
      "examples": [
        "0 = Invalid",
        "1 = AutoFadeEnabled"
      ]
    },
    "EnumMetricMsgStatus": {
      "title": "EnumMetricMsgStatus",
      "description": "Enumeration - Defining the different status of Messages for metric tracking",
      "type": "integer",
      "enum": [
        0,
        200,
        500
      ],
      "x-enumNames": [
        "Invalid",
        "Success",
        "Failure"
      ],
      "examples": [
        "0 = Invalid",
        "200 = Success",
        "500 = Failure"
      ]
    },
    "EnumMetricMsgTransport": {
      "title": "EnumMetricMsgTransport",
      "description": "Enumeration - Defining the different transports used for distributing raptor Messages for metric tracking",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Rest",
        "ZeroMQ"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Rest",
        "2 = ZeroMQ"
      ]
    },
    "EnumMetricMsgMethod": {
      "title": "EnumMetricMsgMethod",
      "description": "Enumeration - Defining the Method flow raptor Messages for metric tracking",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Send",
        "Receive"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Send",
        "2 = Receive"
      ]
    },
    "EnumPlaylistType": {
      "title": "EnumPlaylistType",
      "description": "Enumeration - type of playlist",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "x-enumNames": [
        "Invalid",
        "Schedule",
        "SpotBlock",
        "ClockTemplate",
        "FillContent",
        "Traffic",
        "Emergency",
        "HotKeyBank",
        "NetworkSpotBlock",
        "NetworkTraffic",
        "EdgeSchedule"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Schedule",
        "2 = SpotBlock",
        "3 - ClockTemplate",
        "4 - FillContent",
        "5 - Traffic",
        "6 - Emergency",
        "7 - HotKeyBank",
        "8 - NetworkSpotBlock",
        "9 - NetworkTraffic",
        "10 - EdgeSchedule"
      ]
    },
    "EnumPlaylistState": {
      "title": "EnumPlaylistState",
      "description": "Enumeration - State of playlist",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "x-enumNames": [
        "Invalid",
        "Created",
        "Published",
        "Inactive",
        "Played",
        "Reconciled",
        "Archived"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Created",
        "2 = Published",
        "3 = Inactive",
        "4 = Played",
        "5 = Reconciled",
        "6 = Archived"
      ]
    },
    "EnumStationConfigStatus": {
      "title": "EnumStationConfigStatus",
      "description": "Enumeration - Defining the different status a station configuration is operating under",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "x-enumNames": [
        "Invalid",
        "Created",
        "Configured",
        "Inactive",
        "OffAir",
        "Live"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Created",
        "2 = Configured",
        "3 = Inactive",
        "4 = OffAir",
        "5 = Live"
      ]
    },
    "EnumSplitCommand": {
      "title": "EnumSplitCommand",
      "description": "Enumeration - EnumSplitCommand",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4
      ],
      "x-enumNames": [
        "Invalid",
        "Play",
        "Stop",
        "Pause",
        "Cue"
      ],
      "example": [
        "0 = Invalid",
        "1 = Play",
        "2 = Stop",
        "3 = Pause",
        "4 = Cue"
      ]
    },
    "EnumZettaSplitReceiver": {
      "title": "EnumZettaSplitReceiver",
      "description": "Does this station receive split messages from Zetta",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "SplitReceiver"
      ],
      "example": [
        "0 = Invalid",
        "1 = SplitReceiver"
      ]
    },
    "EnumZettaBillboardType": {
      "title": "EnumZettaBillboardType",
      "description": "Type of billboard output",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "RaptorJson",
        "ZettaFullXml",
        "None"
      ],
      "example": [
        "0 = Invalid",
        "1 = RaptorJson",
        "2 = ZettaFullXml",
        "3 = None"
      ]
    },
    "EnumZettaBillboardHTTPMethod": {
      "title": "EnumZettaBillboardHTTPMethod",
      "description": "EnumZettaBillboardHTTPMethod",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Get",
        "Post"
      ],
      "example": [
        "0 = Invalid",
        "1 = Get",
        "2 = Post"
      ]
    },
    "EnumDSPSourceType": {
      "title": "EnumDSPSourceType",
      "description": "Enum - Digital Sound Processing Source",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Omnia3",
        "Sound4",
        "Sound4RTP"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Omnia3",
        "2 = Sound4",
        "3 = Sound4RTP (obsolete 2020-11-04), "
      ]
    },
    "EnumGSelectorAssetType": {
      "title": "EnumGSelectorAssetType",
      "description": "Enum - gselector asset types, used to sync to raptor asset types",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Song",
        "Link",
        "Spot"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Song",
        "2 = Link",
        "3 = Spot"
      ]
    },
    "EnumFlatFileType": {
      "title": "EnumFlatFileType",
      "description": "Enum - flat file type",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Traffic",
        "Reconcile"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Traffic",
        "2 = Reconcile"
      ]
    },
    "EnumTimingType": {
      "title": "EnumTimingType",
      "description": "Enum - EnumTimingType",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "None",
        "Stretch",
        "Drop"
      ],
      "examples": [
        "0 = Invalid",
        "1 = None",
        "2 = Stretch",
        "3 = Drop"
      ]
    },
    "EnumRaptorChangeType": {
      "title": "EnumRaptorChangeType",
      "description": "Enum - Change Type",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Asset",
        "Event"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Asset",
        "2 = Event"
      ]
    },
    "EnumSyncIntervalType": {
      "title": "EnumSyncIntervalType",
      "description": "Enum - Interval Type",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Day",
        "Hour"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Day",
        "2 = Hour"
      ]
    },
    "EnumAssetFieldScope": {
      "title": "EnumAssetFieldScope",
      "description": "Enum - Asset Field Scope",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Primary",
        "Extra",
        "Station"
      ],
      "examples": [
        "0 = Primary",
        "1 = Extra",
        "2 = Station"
      ]
    },
    "EnumAssetFieldType": {
      "title": "FieldType",
      "description": "Enum - Asset Field Type",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "string",
        "date-time"
      ],
      "examples": [
        "0 = string",
        "1 = date-time"
      ]
    },
    "EnumAnalysisMappingRule": {
      "title": "EnumAnalysisMappingRule",
      "description": "Enum - Enumation to determine how we should update an Asset Attribute after analysis",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Never",
        "Undefined",
        "Always"
      ],
      "examples": [
        "0 = Never, update or set the associated asset attribute ",
        "1 = Undefined, update or set the associated asset attribute if the attribute is undefined",
        "2 = Always, update the asset attribute with the latest analysis data"
      ]
    },
    "EnumAnalysisMappingSource": {
      "title": "EnumAnalysisMappingSource",
      "description": "Enum - Enumation to determine how we should update an Asset Attribute after analysis",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "AnalysisData",
        "Override"
      ],
      "examples": [
        "0 = AnalysisData, Looking up the attribute in the returned analysisdata json object",
        "1 = Override, a hardcode string is being used to popluate the attribute"
      ]
    },
    "EnumWatermarkingSkill": {
      "title": "EnumWatermarkingSkill",
      "description": "Enum - Enumation to determine what skills we are using for watermarking audio",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Disabled",
        "Encoding",
        "Decoding"
      ],
      "examples": [
        "[0x0000] 0 = Disabled, Not using watermarking",
        "[0x0001] 1 = Encoding, Watermarking Encoder Enabled",
        "[0x0002] 2 = Decoding, Watermarking Decoding/Detection Enabled"
      ]
    },
    "EnumAudioLevelsSkill": {
      "title": "EnumAudioLevelsSkill",
      "description": "Enum - Enumation to determine what skills we are using for audio levels DSP",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-flagEnum": "true",
      "x-enumNames": [
        "Disabled",
        "Right",
        "Left"
      ],
      "examples": [
        "[0x0000] 0 = Disabled, Not using watermarking",
        "[0x0001] 1 = Right, Right Audio Levels Enabled",
        "[0x0002] 2 = Left, Left Audio Levels Enabled"
      ]
    },
    "EnumMusicSourceTypes": {
      "title": "EnumMusicSourceTypes",
      "description": "Type of Music Search Sources",
      "type": "integer",
      "enum": [
        0
      ],
      "x-enumNames": [
        "MusicPoint"
      ],
      "examples": [
        "0 = MusicPoint"
      ]
    },
    "EnumBlockType": {
      "title": "EnumBlockType",
      "description": "EnumBlockType",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "SpotBlock",
        "NetworkSpotBlock"
      ],
      "examples": [
        "0 = Invalid",
        "1 = SpotBlock",
        "2 = NetworkSpotBlock"
      ]
    },
    "EnumCacheState": {
      "title": "EnumCacheState",
      "description": "Enum - Status of Audio Caching",
      "type": "integer",
      "enum": [
        -1,
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "x-enumNames": [
        "Error",
        "Invalid",
        "Ready",
        "Caching",
        "Complete",
        "Canceled",
        "Ignored"
      ],
      "examples": [
        "-1 = Error",
        "0 = Invalid",
        "1 = Ready",
        "2 = Caching",
        "3 = Complete",
        "4 = Canceled",
        "5 = Ignored"
      ]
    },
    "EnumBedType": {
      "title": "EnumBedType",
      "description": "Enum - type of bed",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "Bed"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Ready"
      ]
    },
    "EnumSeqShowType": {
      "title": "EnumSeqShowType",
      "description": "EnumSeqShowType",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Show",
        "ShowChild",
        "ShowChildNoUsed"
      ],
      "examples": [
        "0 = Invalid",
        "1 = Show",
        "2 = ShowChild",
        "3 = ShowChildNoUsed"
      ]
    },
    "EnumStreamTriggerType": {
      "title": "EnumStreamTriggerType",
      "description": "EnumStreamTriggerType",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "StreamTrigger",
        "ShowStreamTrigger"
      ],
      "examples": [
        "0 = Invalid",
        "1 = StreamTrigger",
        "2 = ShowStreamTrigger"
      ]
    },
    "EnumOrigin": {
      "title": "EnumOrigin",
      "description": "Enum - used to identify where the data was created or originated",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "Cloud",
        "Edge"
      ],
      "examples": [
        "0 = Invalid - Null or invalid means it was not replicated",
        "1 = Cloud, The data was original create from a cloud original",
        "2 = Edge, The data was most likely a edge replica copy, OriginID may contain the id it was copied from"
      ]
    },
    "EnumWellKnownAssetType": {
      "title": "EnumWellKnownAssetType",
      "description": "Enum - used on an asset type to know if this is a well known asset type",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "x-enumNames": [
        "Invalid",
        "Song",
        "Spot",
        "NetworkSpot",
        "ShowEpisode",
        "Eas"
      ],
      "examples": [
        "0 = Invalid - Null or invalid means it was not replicated",
        "1 = Song",
        "2 = Spot",
        "3 = Network Spot",
        "4 - ShowEpisode",
        "5 - Eas"
      ]
    },
    "EnumMessagingType": {
      "title": "EnumMessagingType",
      "description": "Enum - EnumMessagingType",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "ZeroMQ",
        "NetMQ",
        "IotCore"
      ],
      "examples": [
        "0 = Invalid",
        "1 = ZeroMQ",
        "2 = NetMQ",
        "3 = IotCore"
      ]
    },
    "RaptorEvent": {
      "title": "RaptorEvent",
      "description": "represents an Event, something that is scheduled in a Playlist",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "PlaylistID": {
          "description": "playlist this event belongs to",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "EventID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original Event this one was created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "SequenceNumber": {
          "description": "order of events in the playlist",
          "type": "number"
        },
        "EventType": {
          "description": "The playlist event type, like: Play Asset, Spot Block, ETM...",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventType"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "A description summary of what the event is being used for",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StatusCode": {
          "description": "TODO",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventStatusCode"
            },
            {
              "type": "null"
            }
          ]
        },
        "ErrorCode": {
          "description": "TODO",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventErrorCode"
            },
            {
              "type": "null"
            }
          ]
        },
        "EditCode": {
          "description": "TODO",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventEditCode"
            },
            {
              "type": "null"
            }
          ]
        },
        "EditComment": {
          "description": "reason for skipping a spot, selected or entered by the user",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "EtmType": {
          "description": "If the Event is and ETM, what type of etm are we [Hard, Soft, Hit, Reset]",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventETMType"
            },
            {
              "type": "null"
            }
          ]
        },
        "Chain": {
          "description": "The chain type assoiciated with the event, [Segue, Stop, AutoPost ...]",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventChainType"
            },
            {
              "type": "null"
            }
          ]
        },
        "AirStartDateTime": {
          "description": "Time the event started (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "AirStopDateTime": {
          "description": "Time the event Stopped (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Skipped": {
          "description": "event was manually skipped by the user",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "SkipType": {
          "description": "reasons for skipping a spot",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumSkipType"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetID": {
          "description": "AssetID to be played",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeID": {
          "description": "AssetTypeID to be played. Used when there isn't an AssetID but will be filled by something else later. Like a VoiceTrack",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "Asset": {
          "description": "(READONLY) Asset data if pulled with the event ",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "HardTime": {
          "description": "second.ms from playlist start event should start",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ExternalIDs": {
          "description": "External ids associated with the playlist event (Depreciated 2019-07-01)",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorTypeValuePair"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ThirdPartyIDs": {
          "description": "Stores Third Party Ids, used for referencing third party systems,  associated with a playlist events. Please Use Recommending Naming Convention {Application}_{CustomField}",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEventThirdPartyReferences"
            },
            {
              "type": "null"
            }
          ]
        },
        "Tags": {
          "description": "tags associated with the playlist event",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ResolveTags": {
          "description": "Tags used to resolve this log event",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Version": {
          "description": "version of the Playlist, used to handle concurrent writes",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Note": {
          "description": "Zetta/NexGen comment lite",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Color": {
          "description": "Color of event background",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OverridePOIMarkup": {
          "description": "Used to override POIMarkup at an event level ",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPOIMarkup"
            },
            {
              "type": "null"
            }
          ]
        },
        "ChildPlaylistID": {
          "description": "playlist for child events",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastModifyDescription": {
          "description": "Description of who made the last modify",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "TimingType": {
          "description": "Is the event stretchable",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumTimingType"
            },
            {
              "type": "null"
            }
          ]
        },
        "PreviousEventID": {
          "description": "event id of previous event, used mainly for Voice Tracks",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "NextEventID": {
          "description": "event id of next event, used mainly for Voice Tracks",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "LinearAdData": {
          "description": "LinearAdData",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLinearAdData"
            },
            {
              "type": "null"
            }
          ]
        },
        "NetworkLinearAdData": {
          "description": "NetworkLinearAdData",
          "oneOf": [
            {
              "$ref": "#/definitions/NetworkRaptorLinearAdData"
            },
            {
              "type": "null"
            }
          ]
        },
        "BlockType": {
          "description": "BlockType",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumBlockType"
            },
            {
              "type": "null"
            }
          ]
        },
        "ShowEpisodeID": {
          "description": "Show episode id this event is associated with",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Origin": {
          "description": "denoting the origin of the event",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorEventArray": {
      "title": "RaptorEventArray",
      "description": "represents an array of events",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorEvent"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorEventThirdPartyReferences": {
      "title": "RaptorEventThirdPartyReferences",
      "description": "Wellknown or Custom Third Party Ids used on playlist events for referencing thirdparty systems. Please Use Recommending Naming Convention {Application}_{CustomField}",
      "type": "object",
      "properties": {
        "Zetta_EventRefGuid": {
          "description": "Proposed WellKnown Third Party ID, used to store a reference to the zetta event guid",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Zetta_EventType": {
          "description": "Proposed WellKnown Third Party ID, used to store a reference to the zetta event type, even unsupported cloud types (Macros, Minilogs, Execute Commands...)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorLinearAdData": {
      "title": "RaptorLinearAdData",
      "description": "RaptorLinearAdData",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "spotType": {
          "description": "spotType",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "spotInstanceID": {
          "description": "spotInstanceID",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "spotLength": {
          "description": "spotLength",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": {
          "description": "title",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "displayName": {
          "description": "displayName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "scheduledStartTime": {
          "description": "scheduledStartTime",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "advertiserName": {
          "description": "advertiserName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "audioFileUrl": {
          "description": "audioFileUrl",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "assetId": {
          "description": "assetId",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "isci": {
          "description": "isci",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "script": {
          "description": "script",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "liveRead": {
          "description": "liveRead",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "controversialProgramExclusions": {
          "description": "controversialProgramExclusions",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "positionInBreak": {
          "description": "positionInBreak",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "partnerId": {
          "description": "partnerName",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "partnerName": {
          "description": "partnerName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "breakTypeName": {
          "description": "breakTypeName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "referenceId": {
          "description": "referenceId",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "sportsCode": {
          "description": "sportsCode",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "blockNumber": {
          "description": "blockNumber",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "spotVerifyKey": {
          "description": "spotVerifyKey",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "NetworkRaptorLinearAdData": {
      "title": "NetworkRaptorLinearAdData",
      "description": "NetworkRaptorLinearAdData",
      "type": "object",
      "properties": {
        "id": {
          "description": "id",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "scheduleId": {
          "description": "scheduleId",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "spotId": {
          "description": "spotid",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "isci": {
          "description": "isci",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "scheduledStartTime": {
          "description": "scheduledStartTime",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "scheduledEndTime": {
          "description": "scheduledEndTime",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "relayCue": {
          "description": "relayCue",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "length": {
          "description": "displayName",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "type": {
          "description": "type",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "title": {
          "description": "title",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "position": {
          "description": "position",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "industryId": {
          "description": "industryId",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "controversial": {
          "description": "controversial",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "advertiserId": {
          "description": "advertiserId",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "advertiser": {
          "description": "advertiser",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "reportingId": {
          "description": "reportingId",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "EnumEventTags": {
      "title": "EnumEventTags",
      "description": "EnumEventTags",
      "type": "string",
      "enum": [
        "LoadedLinearAds",
        "CopiedTrafficSpots",
        "ResolvedResolveTags",
        "UserModifiedEvent"
      ]
    },
    "RaptorFillRequest": {
      "title": "RaptorFillRequest",
      "description": "Generate a Content Fill playlist, from the request",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "Attach a station id if the rule is overriden on a station (Station Override Fill Rule)",
          "type": [
            "null",
            "string"
          ],
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationName": {
          "description": "StationName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventID": {
          "description": "Attach a station id if the rule is overriden on a station (Station Override Fill Rule)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "LoadHistoryFromPlaylist": {
          "description": "Load History from Zetta Cloud",
          "type": "boolean"
        },
        "IgnoreFillTag": {
          "description": "Load History from Zetta Cloud",
          "type": "boolean"
        },
        "DoNotSeparateAssets": {
          "description": "Do not separate assets into music and spoken word",
          "type": "boolean"
        },
        "FillJobKey": {
          "description": "unique UUID to identify the fillJob",
          "type": "string"
        },
        "FillRuleKey": {
          "description": "Unique file rule UUID, to identified what fill rule to use",
          "type": "string"
        },
        "FillHistoryKey": {
          "description": "Unique file history UUID, identifies what fill history data to use",
          "type": "string"
        },
        "FillLength": {
          "description": "Length in seconds on how much total fill content needs to be found",
          "type": "number"
        },
        "FillStartDateTime": {
          "description": "Fill is schedule to start playing datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        },
        "FillAnyTags": {
          "description": "Asset Tags match ANY of these fill tags, to be included as asset fill content",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "FillAllTags": {
          "description": "Asset Tags MUST match ALL of these fill tags, to be included as asset fill content",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "FillSeparationTagCap": {
          "description": "Length in seconds on how for fill separation tag",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "FillCallbackUrl": {
          "description": "POST - (Push) callback url we use to send the Fill playlist to once fill job has finished",
          "type": "string"
        },
        "VoiceTagResolveData": {
          "description": "VoiceTagResolveData",
          "oneOf": [
            {
              "$ref": "#/definitions/VoiceTagResolveData"
            },
            {
              "type": "null"
            }
          ]
        },
        "OnlyLoadAssetsFromAssetCollection": {
          "description": "Do not separate assets into music and spoken word",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeIDs": {
          "description": "AssetTypeIDs to fill from",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "VoiceTagResolveData": {
      "type": "object",
      "properties": {
        "Voice": {
          "description": "Asset voice to filter assets by",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FallbackVoice": {
          "description": "Asset voice to filter assets by, if we can't find any that match the voice property",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SearchPlaylistIDForVoice": {
          "description": "If voice is not set and this is true then we will search the playlist that SaveToEventID is in for voice tracks to find the voice",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "SaveToEventID": {
          "description": "EventID to save the resolved event to",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "ResolveCount": {
          "description": "How many assets to resolve",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeID": {
          "description": "DO NOT USE - OBSOLETED (2020-08-27, Replaced with AssetTypeIDs)",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeIDs": {
          "description": "AssetTypeIDs to load from to resolve voice tag resolve jobs",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorFillRule": {
      "title": "RaptorFillRule",
      "description": "represents fill and related types",
      "type": "object",
      "properties": {
        "FillRuleKey": {
          "description": "unique rule key",
          "type": "string"
        },
        "OrganizationID": {
          "description": "organization id to which the rule belongs (Global Organization Fill Rule)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "Attach a station id if the rule is overriden on a station (Station Override Fill Rule)",
          "type": [
            "null",
            "string"
          ],
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "FrequencyCap": {
          "description": "Max per hour this asset can played as",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "SelectionOrder": {
          "description": "Global Selection Order for fill content, spoken word vs music",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumFillType"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "PlacementOrder": {
          "description": "Global Placement Order for fill content, spoken word vs music",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumFillType"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorFillHistory": {
      "title": "RaptorFillHistory",
      "description": "Fill History instance, belonging to an organization",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "Fill History instance, belonging to a station",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "FillHistoryKey": {
          "description": "unique fill History key",
          "type": "string"
        },
        "FillHistory": {
          "description": "List of assets and times the assets played",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorFillHistoryItem"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Fill History at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Fill History Created at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorFillHistoryItem": {
      "title": "RaptorFillHistoryItem",
      "description": "Fill History Tracking Item",
      "type": "object",
      "properties": {
        "AssetID": {
          "description": "asset id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "PlayedDateTime": {
          "description": "Data and Time when the Asset Played (ISO8601)",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    },
    "RaptorAssetFillData": {
      "title": "RaptorAssetFillData",
      "description": "Asset fill data",
      "type": "object",
      "properties": {
        "FrequencyCap": {
          "description": "Max per hour this asset can be played",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EnumFillType": {
      "title": "EnumFillType",
      "description": "Fill Type, which will most likly be mapped to a raptor asset type.",
      "type": "string",
      "enum": [
        "Invalid",
        "Music",
        "Spoken"
      ]
    },
    "RaptorFillCallbackResponse": {
      "title": "RaptorFillCallbackResponse",
      "description": "Status response for sync to future and past events",
      "type": "object",
      "properties": {
        "StatusCode": {
          "description": "statuscode from the API Call (200, 400, ...) ",
          "type": "integer"
        },
        "FillJobKey": {
          "description": "unique UUID to identify the fillJob",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Api response message ",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "Playlist": {
          "description": "resulting playlist from the fill job",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorPlaylist"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorJob": {
      "title": "RaptorJob",
      "description": "Scheduled Jobs, belonging to an organization",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "station id",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobKey": {
          "description": "unique job key using pattern  recommended pattern: {awsguid}_({orgguid})_{trackingguid}.{operation}",
          "type": "string"
        },
        "JobName": {
          "description": "Job Name is to group and track similar job request, ( example Asset Jobs are using AssetIDs... )",
          "type": "string"
        },
        "JobType": {
          "description": "Enumeration describing the type of job running",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumJobType"
            }
          ]
        },
        "JobStatus": {
          "description": "The current status of a scheduled job",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumJobStatus"
            }
          ]
        },
        "KubeJob": {
          "description": "kubernetes job name, pattern = rcs-job-{operation}-{JobName}",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "job description",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobRequestData": {
          "description": "job request data, depends on job type (generally request data need to run the job, json)",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobResultData": {
          "description": "job result data, depends on job type (generally result data from running the job, json)",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorMessageResponse"
            },
            {
              "type": "null"
            }
          ]
        },
        "Arguments": {
          "description": "command line arguements associated with the scheduled job",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobCluster": {
          "description": "Region where the job belongs",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobRunCount": {
          "description": "Number of times the job has ran or attempted to run",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobRetryCount": {
          "description": "Number of times the job should be retried, defaults to zero",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobCallbackUrl": {
          "description": "POST - (Push) callback url we use to return datae to once the job has finished",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduleKey": {
          "description": "if this job was scheduled, then this would link us back to schedule record",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Job Created at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduledDateTime": {
          "description": "Job Scheduled at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "RunningDateTime": {
          "description": "Job Running at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "CompletedDateTime": {
          "description": "Job Completed at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Job Modified at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Infra": {
          "description": "represents the infra version. default: V1; new infra is V2; if not set is considered to be V1",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EnumJobType": {
      "title": "EnumJobType",
      "description": "Type of a schedule job",
      "type": "string",
      "enum": [
        "Invalid",
        "AssetImport",
        "AssetEventImport",
        "AssetAnalysis",
        "AssetFill",
        "GSSchedSync",
        "GSAssetSync",
        "AssetImportV2",
        "AssetEventImportV2",
        "AssetPlaylistImportV2",
        "AssetMusicPointImport",
        "AssetFileImport",
        "CopyPlaylist",
        "GSScheduleRecon",
        "FlatFileTrafficLoad",
        "FlatFileReconcile",
        "ETMFill",
        "GSAssetPullLatest",
        "GSSchedPullLatest",
        "LinearAdsLoad",
        "BlockFill",
        "FTPIngest",
        "VoiceTagResolve"
      ]
    },
    "EnumJobStatus": {
      "title": "EnumJobStatus",
      "description": "Status of a schedule job",
      "type": "string",
      "enum": [
        "Invalid",
        "Created",
        "Preparing",
        "Ready",
        "Retry",
        "Scheduled",
        "Running",
        "Completed",
        "Error",
        "Expired",
        "K8Error"
      ]
    },
    "RaptorJobArray": {
      "title": "RaptorJobArray",
      "description": "represents an array of jobs",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorJob"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorJobCallbackResponse": {
      "title": "RaptorJobCallbackResponse",
      "description": "Status response for sync to future and past events",
      "type": "object",
      "properties": {
        "StatusCode": {
          "description": "statuscode from the API Call (200, 400, ...) ",
          "type": "integer"
        },
        "JobKey": {
          "description": "unique UUID to identify the fillJob",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Api response message ",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "Result": {
          "description": "resulting from the job",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorFillJobRequest": {
      "title": "RaptorFillRequest",
      "description": "Generate a Content Fill playlist, from the request",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "FillJobKey": {
          "description": "unique UUID to identify the fillJob",
          "type": "string"
        },
        "FillRuleKey": {
          "description": "Unique file rule UUID, to identified what fill rule to use",
          "type": "string"
        },
        "FillHistoryKey": {
          "description": "Unique file history UUID, identifies what fill history data to use",
          "type": "string"
        },
        "FillLength": {
          "description": "Length is seconds on how much total fill content needs to be found",
          "type": "number"
        },
        "FillStartDateTime": {
          "description": "Fill is schedule to start playing datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        },
        "FillAnyTags": {
          "description": "Asset Tags match ANY of these fill tags, to be included as asset fill content",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "FillAllTags": {
          "description": "Asset Tags MUST match ALL of these fill tags, to be included as asset fill content",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "FillCallbackUrl": {
          "description": "POST - (Push) callback url we use to send the Fill playlist to once fill job has finished",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorImportAssetJobRequest": {
      "title": "RaptorImportFileAssetRequest",
      "description": "Import a file into the system, metadata will be saved based on Asset, with missing data being populated from File Metadata, then file analysis.",
      "type": "object",
      "properties": {
        "MusicPointID": {
          "description": "MusicPoint ID, If Included allows the asset to be imported from the Music Point System",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FileUrl": {
          "description": "Direct File URL, If Included,  If Included allows the asset file to be imported directly from the url",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Asset": {
          "description": "Base Asset data to used for the asset import, if null a new assetid will be created",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "CallbackUrl": {
          "description": "POST - (Push) callback url we use to send the import Asset once import job has finished",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OmitAudioImport": {
          "description": "Used to prevent update of song audio on processing of Musicpoint metadata only updates",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "OverwriteAssetMetadata": {
          "description": "Used to force overwrite of the existing asset metadata with the metadata from Musicpoint",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorCopyPlaylistJobRequest": {
      "title": "RaptorCopyPlaylistJobRequest",
      "description": "Copy Playlist Job Request ",
      "type": "object",
      "properties": {
        "fromDateTime": {
          "description": "DateTime string which the copy will begin from on the Source Station",
          "type": "string",
          "format": "date-time"
        },
        "sourceStationID": {
          "description": "StationID that the Playlist will be copied from",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "hours": {
          "description": "Number of hours which to copy starting at the fromDateTime",
          "type": "integer"
        },
        "toDateTime": {
          "description": "DateTime string which the copy will begin from on the Target Station",
          "type": "string",
          "format": "date-time"
        },
        "targetStationID": {
          "description": "StationID that the Playlist copy will be copied to",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "additionalProperties": false
    },
    "RaptorFlatFileJobRequest": {
      "title": "RaptorFlatFileJobRequest",
      "description": "Handle Flat File processing request",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "StationID the request applies to",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "FlatfileType": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumFlatFileType"
            },
            {
              "type": "null"
            }
          ]
        },
        "TemplateName": {
          "description": "Template name of Flat File Type",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Contents": {
          "description": "Flat File Contents",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DateTime": {
          "description": "DateTime string which the copy will begin from on the Source Station",
          "type": "string",
          "format": "date-time"
        },
        "Hours": {
          "description": "Hours to process",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "CallbackUrl": {
          "description": "POST - (Push) callback url we use to send the results of flat file process",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorJobSchedule": {
      "title": "RaptorJobSchedule",
      "description": "Job Schedule, belonging to an organization",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "station id",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduleKey": {
          "description": "unique schedule key using pattern  recommended pattern: {awsguid}_({orgguid})_{trackingguid}.{operation}",
          "type": "string"
        },
        "ScheduleTitle": {
          "description": "Job Name is to group and track similar job request, ( example Asset Jobs are using AssetIDs... )",
          "type": "string"
        },
        "ScheduleJobType": {
          "description": "Enumeration describing the type of job",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumJobType"
            }
          ]
        },
        "Enabled": {
          "description": "Used to enable or disable this ducking setting.",
          "type": "boolean"
        },
        "CronSchedule": {
          "description": "CRON representation of the schedule for the job, https://www.freebsd.org/cgi/man.cgi?crontab(5)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "job description",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduleJobData": {
          "description": "job request data, depends on job type (generally request data need to run the job, json)",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxCount": {
          "description": "Maximum number ",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "StartDateTime": {
          "description": "Date to Enable the Job Schedule",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EndDateTime": {
          "description": "Date to end the Job Schedule",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "KillDateTime": {
          "description": "Date after which this job schedule should be removed",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduledJobsCount": {
          "description": "How many instances of this job have been scheduled ",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Job Created at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Job Modified at datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorJobScheduleArray": {
      "title": "RaptorJobScheduleArray",
      "description": "represents an array of job schedule",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorJobSchedule"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorGSSchedSyncJobScheduleTemplate": {
      "title": "RaptorGSSchedSyncJobScheduleTemplate",
      "description": "Job Schedule Template for GS Sched Sync",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "StationID that has GS Station Mapping",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "IntervalType": {
          "oneOf": [
            {
              "$ref": "#/definitions/EnumSyncIntervalType"
            },
            {
              "type": "null"
            }
          ]
        },
        "IntervalCount": {
          "description": "Number of days/hour to load",
          "type": "integer",
          "default": 1
        }
      },
      "additionalProperties": false
    },
    "RaptorGSSchedPullLatestJobScheduleTemplate": {
      "title": "RaptorGSSchedPullLatestJobScheduleTemplate",
      "description": "Job Schedule Template for GS Sched Pull Latest",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "StationID that has GS Station Mapping",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "additionalProperties": false
    },
    "RaptorGSAssetPullLatestJobScheduleTemplate": {
      "title": "RaptorGSSchedPullLatestJobScheduleTemplate",
      "description": "Job Schedule Template for GS Sched Pull Latest",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "StationID that has GS Station Mapping",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "RestrictPublicationStatus": {
          "description": "Used to filter all the publication status that do not match.",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "PastHours": {
          "description": "Used to filter past hours (<= Station Time + 1H).",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLinearAdsLoadTemplate": {
      "title": "RaptorLinearAdsLoadTemplate",
      "description": "JRaptorLinearAdsLoadTemplate",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "StationID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationName": {
          "description": "StationName",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventID": {
          "description": "Attach a station id if the rule is overriden on a station (Station Override Fill Rule)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "TimeTillAir": {
          "description": "TimeTillAir",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SecondCall": {
          "description": "SecondCall",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "AirTime": {
          "description": "AirTime",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BlockEventID": {
          "description": "BlockEventID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "LoadLocalSpotsByBlockIndex": {
          "description": "LoadLocalSpotsByBlockIndex",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastModifyDescription": {
          "description": "LastModifyDescription",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLayout": {
      "title": "RaptorLayout",
      "description": "Represents a Layout in the UI",
      "type": "object",
      "properties": {
        "LayoutID": {
          "description": "Unique ID (Guid)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "LayoutName": {
          "description": "Layout name",
          "type": "string"
        },
        "Public": {
          "description": "Is this a public layout. NOTE: will always be 'true' for layouts saved to the DB.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "Locked": {
          "description": "Is the layout locked",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "State": {
          "description": "Serialized JSON representing the dock-spawn-ts state of the layout",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Modules": {
          "description": "A Dictionary of the layout modules. NOTE: modules are stored within the layout",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorLayoutModuleDictionary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLayoutDictionary": {
      "title": "RaptorLayoutDictionary",
      "description": "Generic SubDocument of RaptorLayout objects (the key is the LayoutID)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorLayout"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorLayoutModule": {
      "title": "RaptorLayoutModule",
      "description": "Represents a Module in a Layout",
      "type": "object",
      "properties": {
        "ModuleID": {
          "description": "Unique ID (Guid)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "ModuleTypeID": {
          "description": "The ID of th module type",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationID": {
          "description": "The ID of the station selected in the module",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "Settings": {
          "description": "Serialized JSON representing the settings of the moduel. NOTE: The settings differ by module type",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLayoutModuleDictionary": {
      "title": "RaptorLayoutModuleDictionary",
      "description": "Generic SubDocument of RaptorLayoutModule objects (the key is the ModuleID)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorLayoutModule"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorLoggingMessage": {
      "title": "RaptorLogging",
      "description": "Raptor debug logging object used to track debug logging in raptor",
      "type": "object",
      "properties": {
        "EventTimeStamp": {
          "description": "when the logging event occurred, using datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        },
        "Level": {
          "description": "The logging level of the logged message",
          "$ref": "#/definitions/EnumLoggingLevel"
        },
        "Data": {
          "description": "The actual message being log, the description of the logging event",
          "type": "string"
        },
        "Computer": {
          "description": "The CPU, where the operation was executed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "User": {
          "description": "User account in use, where the operation was executed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Application": {
          "description": "the process or application, where the operation was executed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "TransKey": {
          "description": "a transaction key, generally used to store the [PID][TID] of where the logging event occurred",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Location": {
          "description": "grouping or location used , where the operation was executed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Category": {
          "description": "category, generally Class or function where the operation was executed",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Repeated": {
          "description": "number used to track how many times the same log data has occurred",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "BookmarkFlag": {
          "description": "user troubleshooting /Enum value used to bookmark logging events ",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumLoggingBookmark"
            },
            {
              "type": "null"
            }
          ]
        },
        "BookmarkNote": {
          "description": "user note, used for troubleshooting and  bookmarking logging events ",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLoggingConfig": {
      "title": "RaptorLogging",
      "description": "Raptor debug logging object used to Configuration Properties for Logging for an application level logging",
      "type": "object",
      "properties": {
        "DefaultTransKey": {
          "description": "When Configuring a raptor logger, the 'TransKey' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DefaultComputer": {
          "description": "When Configuring a raptor logger, the 'Computer' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DefaultUser": {
          "description": "When Configuring a raptor logger, the 'User' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DefaultApplication": {
          "description": "When Configuring a raptor logger, the 'Application' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DefaultLocation": {
          "description": "When Configuring a raptor logger, the 'Location' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DefaultCategory": {
          "description": "When Configuring a raptor logger, the 'Category' value to use if logging message does not directly set it",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FileLevelMask": {
          "description": "Level mask used to determine what, logging messages should be logged to a file",
          "$ref": "#/definitions/EnumLoggingLevel"
        },
        "FileFormatMask": {
          "description": "Format mask used to determine what logging format should be used when logging messages to a file",
          "$ref": "#/definitions/EnumLoggingFormat"
        },
        "FilePath": {
          "description": "The root filepath of where debug log files should be written",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FileName": {
          "description": "The filename and directory where the file should be written. NOTE: special variable syntax can be used",
          "default": "%APP%_%DD%.RaptorLog",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ConsoleLevelMask": {
          "description": "Level mask used to determine what, logging messages should be logged to the console",
          "$ref": "#/definitions/EnumLoggingLevel"
        },
        "ConsoleFormatMask": {
          "description": "Format mask used to determine what logging format should be used when logging messages to the console",
          "$ref": "#/definitions/EnumLoggingFormat"
        },
        "DupMessageTimeout": {
          "description": "Timeout In Seconds, used to track a duplicate message. Any messages that are exact matches with in the timeout are track as dups",
          "default": 2,
          "type": "number"
        }
      },
      "additionalProperties": false
    },
    "RaptorLoggingArray": {
      "title": "RaptorLoggingArray",
      "description": "represents an array of RaptorLoggingMessage",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorLoggingMessage"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorOrganization": {
      "title": "RaptorOrganization",
      "description": "Top-level object in Raptor, owns Stations",
      "type": "object",
      "properties": {
        "OrgID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original Org this one was copied or created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "OrgName": {
          "description": "organization name",
          "type": "string"
        },
        "Stations": {
          "description": "(READONLY ARRAY) Optionally Stations can be returned when getting an organization, NOTE: stations are not stored within the organization",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorStation"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LocalizerAssetTypeID": {
          "description": "DO NOT USE - OBSOLETED (2020-08-27, Replaced with LocalizerAssetTypeIDs)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "LocalizerAssetTypeIDs": {
          "description": "AssetTypeIDs to load from to resolve voice tag resolve jobs",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "BlockFillAssetTypeIDs": {
          "description": "AssetTypeIDs to use for block fill",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "EtmFillAssetTypeIDs": {
          "description": "AssetTypeIDs to use for etm fill",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Cluster": {
          "title": "Cluster",
          "description": "Configure primary, secondary (optional) and current cluster",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorCluster"
            }
          ]
        },
        "MusicSource": {
          "title": "Music Source",
          "description": "[OBSOLETE] Listing for Music Source",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorMusicSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "MusicSourceDictionary": {
          "title": "Music Sources",
          "description": "A Dictionary of music sources configuration, Dictionary Key is the MusicSource Key",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorMusicSourceDictionary"
            },
            {
              "type": "null"
            }
          ]
        },
        "okta": {
          "title": "group OKTA info",
          "description": "group OKTA info",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorOKTAInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "CurrentStorage": {
          "title": "Current Storage",
          "description": "Current Total S3 Bucket Storage for Organization",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "StorageCount": {
          "title": "Storage Count",
          "description": "Current Total S3 Objects for Organization",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "StorageThreshold": {
          "title": "Storage Threshold",
          "description": "Organization storage threshold Alert",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Layouts": {
          "description": "A Dictionary of all public layouts for the organzization, NOTE: layouts are not stored within the organization",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorLayoutDictionary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerInputConfig": {
      "title": "RaptorPlayerInputConfig",
      "description": "Configuration and status of input device/sources used be the Raptor Player",
      "type": "object",
      "properties": {
        "InputKey": {
          "description": "Unique Key, used to track and identify a specific input source",
          "type": "string"
        },
        "InputType": {
          "description": "Enumeration defining what type of input source is being used, used to determine the format of the InputPath",
          "$ref": "#/definitions/EnumPlaybackInputType"
        },
        "InputPath": {
          "description": "String used to describe where the input source originates",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "MirrorPaths": {
          "description": "Alternative Mirrored path for the same endpoint defined in the primary Path! It should be of the same endpoint attributes. ",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "InputExpires": {
          "description": "Timestamp when the player should expire or auto unload this input",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputLogin": {
          "description": "If the input source requires authentication, the login account",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputPassword": {
          "description": "If the input source requires authentication, the login password",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputOwner": {
          "description": "String used to describe who owns this input",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "POIMarkup": {
          "description": "Non-destructive markup, on how to play back this input instance",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPOIMarkup"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputOmniaDSP": {
          "description": "(OBSOLETED: DB - 2012-02-05), Omnia DSP Settings being used on the input",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerOmniaConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerOutputConfig": {
      "title": "RaptorPlayerOutputConfig",
      "description": "Configuration and status of output device used by the Raptor Player ",
      "type": "object",
      "properties": {
        "OutputKey": {
          "description": "Unique Key, used to track and identify a specific output device",
          "type": "string"
        },
        "OutputActive": {
          "description": "Used to define if the output is currently being used",
          "type": [
            "boolean"
          ],
          "default": true
        },
        "OutputPath": {
          "description": "String used to describe where the output target originates",
          "type": "string"
        },
        "OutputType": {
          "description": "Enumeration defining what type of output target is being used, used to determine the format of the OutputPath",
          "$ref": "#/definitions/EnumPlaybackOutputType"
        },
        "OutputContent": {
          "$ref": "#/definitions/EnumPlaybackFormat"
        },
        "OutputLogin": {
          "description": "If the output requires authentication, authentication login account",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputPassword": {
          "description": "If the output requires authentication, authentication password",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputBitrate": {
          "description": "output bitrate in bytes",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputSamplerate": {
          "description": "output sample rate in bytes",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputLiveStreamUrl": {
          "description": "Store the live listening stream URL, where the public can connect to listen the this stream",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerMixerConfig": {
      "title": "RaptorPlayerMixerConfig",
      "description": "Configuration and status of an audio mixer used by the Raptor Player",
      "type": "object",
      "properties": {
        "MixerKey": {
          "description": "Name of a configured instance of a mixer (Default_Mixer)",
          "type": "string",
          "default": "Default_Mixer"
        },
        "DSPSourceType": {
          "description": "What DSP Processing Source is enabled on the Mixer",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumDSPSourceType"
            },
            {
              "type": "null"
            }
          ]
        },
        "OmniaDSP": {
          "description": "Omnia DSP being used on the mixer",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerOmniaConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "Sound4DSP": {
          "description": "Sound4 DSP being used on the mixer",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerSound4Config"
            },
            {
              "type": "null"
            }
          ]
        },
        "IntrasonicsDSP": {
          "description": "Intrasonics DSP being used on the mixer",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerIntrasonicsConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "NielsenConfig": {
          "description": "Used for Nielson configuration on a perstation basis",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorNielsenConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "AudioLevelsDSP": {
          "description": "Audio Level Detection DSP being used on the mixer",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerAudioLevelsConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "Outputs": {
          "description": "[OBSOLETE] Configuration of output devices being used by the mixer",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerOutputConfig"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputDictionary": {
          "description": "A Dictionary of all outputs, being used by the mixer, Dictionary Key is the OutputKey",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorOutputConfigDictionary"
            }
          ]
        },
        "Inputs": {
          "description": "[OBSOLETE] Configuration of input sources being used by the mixer",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerInputConfig"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "InputDictionary": {
          "description": "A Dictionary of all inputs, being used by the mixer, Dictionary Key is the InputKey",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorInputConfigDictionary"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerConfig": {
      "title": "RaptorPlayerConfig",
      "description": "[DeploymentConfig] Raptor Player Configuration - Would be better knows as a Deployment Configuration as it now cordinates configration for Player, Seqencer, Edge Devices",
      "type": "object",
      "properties": {
        "PlayerKey": {
          "description": "[DeploymentKey] Unique Key, used to track and identify a specific Station Deployment, If a Cloud Player keep Kubernetes complient limit to 10 Characters",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "PlayerEnabled": {
          "description": "[DeploymentEnabled] Used to define if the station deployment is currently being used",
          "type": [
            "boolean"
          ],
          "default": true
        },
        "PlayerDescription": {
          "description": "[DeploymentDescription] User friendly description of the location of the station deployment",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SequencerConfig": {
          "description": "[SequencerConfig] Details Sequencer Configuration Assosiated with the deployment instance of the sequencer ",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorSequencerConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerGroup": {
          "description": "[PlayerGroup] Grouping Name used to group together participating players, used for hotspare playback tracking. ",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerPurposeType": {
          "description": "[PlayerPurposeType] Perferred method of how sequencer communicates with and controls player (Invalid, Primary, Hotspare, Anonymous), Identifies the players priority with sequencer and how the player should be tracked!",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlayerPurpose"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerControlType": {
          "description": "[MessagingControlType?][OBSOLETE???? DB 2021-03-25] [As only ZeroMQ is needed now?] Identified How the deployments messages will is being communicated too (ZeroMQ, API), ZeroMQ is the default method!",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlayerControlType"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeploymentType": {
          "description": "Identifies what type of deployment this player is using, (Kubernetes, Sound4, RaspberryPI ...",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlayerDeploymentType"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeploymentCluster": {
          "description": "Identifies the named cluster the device is deployed too, Primary used with kubernetes deployments",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceSerialNumber": {
          "description": "OBSOLETE: DB 2020-12-03, Moved to RaptorEdgeDeviceConfig.DeviceSerialNumber, and playerkey will be used to match edge devices",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceLocalizeMount": {
          "description": "OBSOLETE: DB 2020-12-03, Moved to RaptorEdgeDeviceConfig.DeviceLocalizeMount",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceCacheMount": {
          "description": "OBSOLETE: DB 2020-12-03, Moved to RaptorEdgeDeviceConfig.DeviceCacheMount",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Mixers": {
          "description": "[OBSOLETE] (READONLY ARRAY) - AN ARRAY Configuration of all mixers, being used by the Raptor Player ",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerMixerConfig"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "MixerDictionary": {
          "description": "A Dictionary of all player mixers, being used by the Raptor Player, Dictionary Key is the Mixer Key",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorMixerConfigDictionary"
            }
          ]
        },
        "LocalizerConfig": {
          "description": "OBSOLETE: DB 2020-12-03, Moved to RaptorEdgeDeviceConfig.LocalizerConfig",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorLocalizerConfig"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EASBoxIPPort": {
          "description": "EASBoxIPPort",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerInputSnapshot": {
      "title": "RaptorPlayerInputSnapshot",
      "description": "Current Player Input snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player input snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimePlayerRoute": {
          "description": "Unique player route, used to identify exact instance of player snapshot was taken",
          "type": "string"
        },
        "RealtimePlayerKey": {
          "description": "Player Key, the input belongs too",
          "type": "string"
        },
        "RealtimePlayerGroup": {
          "description": "Player Group, the input belongs too",
          "type": "string"
        },
        "RealtimeMixerKey": {
          "description": "Mixer Key, the input belongs too",
          "type": "string"
        },
        "RealtimeInputKey": {
          "description": "The unique key assigned to this input instance",
          "type": "string"
        },
        "RealtimeDisplay": {
          "description": "The Visual Display String of the Item being played on the stream, Metadata Stream Title",
          "type": "string"
        },
        "RealtimePath": {
          "description": "The actual file or url being played",
          "type": "string"
        },
        "RealtimeCache": {
          "description": "Stores details about the current Input Cache system",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorCacheSnapshot"
            },
            {
              "type": "null"
            }
          ]
        },
        "RealtimeLastActionEvent": {
          "description": "The Last Action event that occurred on this input at the time the snapshot was taken",
          "$ref": "#/definitions/EnumPlaybackActionEvent"
        },
        "RealtimePlayState": {
          "description": "Input playback state assigned to the Input at the time the snapshot was taken",
          "$ref": "#/definitions/EnumPlaybackState"
        },
        "RealtimePlayingTimestamp": {
          "description": "Timestamp when the player started playing the input",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "RealtimePosition": {
          "description": "Inputs current playback position at the time the snapshot was taken",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "RealtimeLength": {
          "description": "Inputs current calculated playback length",
          "type": "number"
        },
        "RealtimeVolume": {
          "description": "Inputs current playback volume as a percentage, at the time the snapshot was taken",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "RealtimePitchlessPlayRate": {
          "description": "Inputs current playback pitchless playrate factor, at the time the snapshot was taken",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "RealtimePitchedPlayRate": {
          "description": "Inputs current playback pitched playrate factor, at the time the snapshot was taken",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "RealtimeGain": {
          "description": "Inputs current playback Gain factor, at the time the snapshot was taken",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "PublishInputQueue": {
          "description": "List of all the requested publish input messages waiting to be processed",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerMessage_PublishInput"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "PublishInputHistory": {
          "description": "List of all the completed publish input messages",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerMessage_PublishInput"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "InputConfig": {
          "description": "Current Input Configuration associated with the input snapshot",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerInputConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerOutputSnapshot": {
      "title": "RaptorPlayerOutputSnapshot",
      "description": "Current Player Output snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player output snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimePlayerRoute": {
          "description": "Unique player route, used to identify exact instance of player snapshot was taken",
          "type": "string"
        },
        "RealtimePlayerKey": {
          "description": "Player Key, the output belongs too",
          "type": "string"
        },
        "RealtimePlayerGroup": {
          "description": "Player Group, the output belongs too",
          "type": "string"
        },
        "RealtimeMixerKey": {
          "description": "Mixer Key, the output belongs too",
          "type": "string"
        },
        "RealtimeOutputKey": {
          "description": "Output Key",
          "type": "string"
        },
        "RealtimeOutputState": {
          "description": "Output playback state assigned to the Output at the time the snapshot was taken",
          "$ref": "#/definitions/EnumPlaybackState"
        },
        "RealtimeCreatedTimestamp": {
          "description": "Timestamp when the player created this output",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputConfig": {
          "description": "Current output Configuration associated with the output snapshot",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerOutputConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerMixerSnapshot": {
      "title": "RaptorPlayerMixerSnapshot",
      "description": "Current Player mixer snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player mixer snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimePlayerRoute": {
          "description": "Unique player route, used to identify exact instance of player snapshot was taken",
          "type": "string"
        },
        "RealtimePlayerKey": {
          "description": "Player Key, the mixer belongs too",
          "type": "string"
        },
        "RealtimePlayerGroup": {
          "description": "Player Group, the mixer belongs too",
          "type": "string"
        },
        "RealtimeMixerKey": {
          "description": "Mixer Key assigned to this mixer instance, mixer are usually assign per device",
          "type": "string"
        },
        "RealtimeAudioChannelSnapshot": {
          "description": "Current Channel Level Snapshots associated with this mixer",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorPlayerAudioLevelsConfig"
            }
          ]
        },
        "RealtimeInputSnapshots": {
          "description": "Current Input Snapshots associated with this mixer",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorInputSnapshotDictionary"
            }
          ]
        },
        "RealtimeOutputSnapshots": {
          "description": "Current Output Snapshots associated with the mixer",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorOutputSnapshotDictionary"
            }
          ]
        },
        "POIWatermarksHistory": {
          "description": "The historical collection of POIMarker Notifications and related watermarks that have been occured on this mixer, this is usually limited to the last 100 of POINotifications, but can be defined in the mixer configuration",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPOIMarker"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "DetectedWatermarksHistory": {
          "description": "The historical collection of Detected Watermarks",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorDetectedWatermark"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "MixerConfig": {
          "description": "Current Mixer Configuration associated snapshot",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerMixerConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerSnapshot": {
      "title": "RaptorPlayerSnapshot",
      "description": "Current Player snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimePlayerRoute": {
          "description": "Unique player route, used to identify exact instance of player snapshot was taken",
          "type": "string"
        },
        "RealtimePlayerKey": {
          "description": "Player Key, the instance of the player",
          "type": "string"
        },
        "RealtimePlayerGroup": {
          "description": "Player Group, the player belongs too",
          "type": "string"
        },
        "RealtimePlayerVersion": {
          "description": "Player version assigned to the player at the time the snapshot was taken",
          "type": "string"
        },
        "RealtimePlayerPurpose": {
          "description": "The realtime player purpose of assignment",
          "$ref": "#/definitions/EnumPlayerPurpose",
          "default": 2
        },
        "RealtimeMixerSnapshots": {
          "description": "Current Mixer Snapshots associated with the mixer ",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorMixerSnapshotDictionary"
            }
          ]
        },
        "PlayerConfig": {
          "description": "Current Player Configuration associated snapshot",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPlayerConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorCacheSnapshot": {
      "title": "RaptorCacheSnapshot",
      "description": "Details about the input cache",
      "type": "object",
      "properties": {
        "CacheState": {
          "description": "Player Key, the instance of the player",
          "$ref": "#/definitions/EnumCacheState"
        },
        "CachePath": {
          "description": "Full Location where the cache file is being stored, directory if file is not cached!",
          "type": "string"
        },
        "CacheSource": {
          "description": "From where did the cache audio originate",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerMessage_PublishInput": {
      "title": "RaptorPlayerMessage_PublishInput",
      "description": "Message to the Raptor Player, to perform operations on a player input",
      "type": "object",
      "properties": {
        "MixerKey": {
          "description": "The Player mixer to publish the input message too",
          "type": "string",
          "default": "Default_Mixer"
        },
        "InputConfig": {
          "description": "The core input configuration, what to play",
          "$ref": "#/definitions/RaptorPlayerInputConfig"
        },
        "InputActionEvent": {
          "description": "The input or action event that need to occur on the input stream",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlaybackActionEvent"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputSeekPosition": {
          "description": "Used to adjust the current play position of the input, so we can seek to a new position",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputSeekPositionPrecision": {
          "description": "Use to determine how accurate a seek position must be, position within this precision will not be adjusted",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputFadeInLength": {
          "description": "Length in seconds, If a PlayState is changing to 'Playing', this will allow us to start playing with a fade in",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "InputFadeOutLength": {
          "description": "Length in seconds, If a PlayState is changing to 'Paused, Stopped', this will allow us to fade out the playing audio",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ReceivedTimestamp": {
          "description": "Timestamp when the player received the message",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerOmniaConfig": {
      "title": "RaptorPlayerOmniaConfig",
      "description": "Raptor Player Omnia DSP Configuration",
      "type": "object",
      "properties": {
        "Preset": {
          "description": "Name of the Active Preset being used",
          "type": "string"
        },
        "LicenseServer": {
          "description": "Address:Port to the server performing for the omnia library",
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerSound4Config": {
      "title": "RaptorPlayerSound4Config",
      "description": "Raptor Player Sound4 DSP Configuration",
      "type": "object",
      "properties": {
        "S4UserID": {
          "description": "The Sound4 UserID used to manage sound4 dsp licensing for each player",
          "type": "string"
        },
        "RADIO_NAME": {
          "description": "Another Sound4 field",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPlayerIntrasonicsConfig": {
      "title": "RaptorPlayerIntrasonicsConfig",
      "description": "Raptor Player Intrasonics Watermarking DSP Configuration",
      "type": "object",
      "properties": {
        "WatermarkingSkill": {
          "description": "Enum assosiated with watermarking purpose: Disable, Encoding, Decoding, Both?",
          "$ref": "#/definitions/EnumWatermarkingSkill",
          "default": 0
        },
        "License": {
          "description": "License to be used by intrasonics",
          "type": "string"
        },
        "Amplitude": {
          "description": "Watermarking Amplitude used for encoding",
          "default": 0.3,
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "number"
            }
          ]
        },
        "CodewordCycleStart": {
          "description": "Watermarking Codeword to start cyclic encoding",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "integer",
              "format": "int64"
            }
          ]
        },
        "CodewordCycleEnd": {
          "description": "Watermarking Codeword to start cyclic encoding",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "integer",
              "format": "int64"
            }
          ]
        },
        "EncodingHistoryMax": {
          "description": "The max POIMarkerHistory Encoding Being tracked on this mixer",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 100
        },
        "DecodingHistoryMax": {
          "description": "The max Codeword Decoding/Detection history Being tracked on this mixer",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 100
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerConfigDictionary": {
      "title": "RaptorPlayerConfigDictionary",
      "description": "Generic SubDocument of RaptorPlayer objects (the key is the PlayerKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorMixerConfigDictionary": {
      "title": "RaptorMixerConfigDictionary",
      "description": "Generic SubDocument of RaptorMixer objects (the key is the MixerKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerMixerConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorOutputConfigDictionary": {
      "title": "RaptorOutputConfigDictionary",
      "description": "Generic SubDocument of RaptorPlayerOutputConfig objects (the key is the OutputKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerOutputConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorInputConfigDictionary": {
      "title": "RaptorInputConfigDictionary",
      "description": "Generic SubDocument of RaptorPlayerInputConfig objects (the key is the InputKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerInputConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorPlayerSnapshotDictionary": {
      "title": "RaptorPlayerSnapshotDictionary",
      "description": "Generic SubDocument of Raptor Player snapshots (key is the PlayerKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerSnapshot"
          }
        ]
      }
    },
    "RaptorMixerSnapshotDictionary": {
      "title": "RaptorMixerSnapshotDictionary",
      "description": "Generic SubDocument of RaptorMixer Snapshot (the key is the MixerKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerMixerSnapshot"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorOutputSnapshotDictionary": {
      "title": "RaptorOutputSnapshotDictionary",
      "description": "Generic SubDocument of RaptorPlayerOutputSnapshot (the key is the OutputKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerOutputSnapshot"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorInputSnapshotDictionary": {
      "title": "RaptorInputSnapshotDictionary",
      "description": "Generic SubDocument of RaptorPlayerInputSnapshot objects (the key is the InputKey)",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorPlayerInputSnapshot"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorDetectedWatermark": {
      "title": "RaptorDetectedWatermark",
      "description": "Watermark detected when decoding an audio stream containing a watermark",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Actual Timestamp when the POI Watermark occured",
          "type": "string",
          "format": "date-time"
        },
        "Watermark": {
          "description": "Watermark that was detected",
          "type": "string"
        },
        "Source": {
          "description": "Optional Source where the watermark was detected, audio path, stream, Route ...",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlayerAudioLevelsConfig": {
      "title": "RaptorPlayerAudioLevelsConfig",
      "description": "Used for configuration and tracking Digital and Decible Audio Levels",
      "type": "object",
      "properties": {
        "AudioLevelSkill": {
          "description": "Enum assosiated with Audio Level Detecton Channels and purpose: Disable, Rigth, Left, Both?",
          "$ref": "#/definitions/EnumAudioLevelsSkill",
          "default": "Disabled"
        },
        "Right": {
          "description": "Right Channel Levels Config and History",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAudioLevelSnapshot"
            },
            {
              "type": "null"
            }
          ]
        },
        "Left": {
          "description": "Left Channel Levels Config and History",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAudioLevelSnapshot"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAudioLevelSnapshot": {
      "title": "RaptorAudioLevelSnapshot",
      "description": "Used for configuration andtracking Digital and Decible Audio Levels",
      "type": "object",
      "properties": {
        "HighDecibelAlert": {
          "description": "High Decibel Target, used to detect if the audio is LOUD/HOT",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAudioLevelAlertConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "LowDecibelAlert": {
          "description": "Low Decibel Target, used to detect if the audio is SOFT/SILENT",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAudioLevelAlertConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "RMSLevels": {
          "description": "Array of RMSDecible Levels, each over 1 Second intervals, generally last 10 level (summarize 10 second)",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorAudioLevelAlertConfig": {
      "title": "RaptorAudioLevelAlertConfig",
      "description": "Setting used for configuring Audio Level detection",
      "type": "object",
      "properties": {
        "DecibelTargetLevel": {
          "description": "Target decible Level used to detect if the audio",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "SecondsToTriggerAlert": {
          "description": "Setting in seconds If any of the target values are outside of accepted ranges",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "SecondsToRepeatAlert": {
          "description": "Setting in seconds to Repeart Alerts notification",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "AlertDateTime": {
          "description": "Timestamp when the RMS Levels are with in alert ranges",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorNielsenConfig": {
      "title": "RaptorNielsenConfig",
      "description": "Raptor Nielsen Watermarking DSP Configuration",
      "type": "object",
      "properties": {
        "NielsenSkill": {
          "description": "Used to Enable or Disable Nielsen watermarking, without loosing configuration. Options (DISABLE_WATERMARKING, ENABLE_CBET ) ",
          "type": "string",
          "enum": [
            "DISABLE_WATERMARKING",
            "ENABLE_CBET"
          ]
        },
        "NielsenCBetCheckDigit": {
          "description": "Corresponds to the CSID and assigned when the Nielsen Radio Watermark SDK is delivered. If the CBET check-digit string does not match the CSID, the authenticator does not permit watermarking with the CSID. ",
          "type": "string"
        },
        "NielsenCBetSID": {
          "description": "Nielsen CBET Source ID (1 through 0x2ffff), Neilsen Station ID, assigned by Nielsen",
          "type": "integer"
        },
        "NielsenLicense": {
          "description": "License to be used by Nielsen",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "NielsenCBetMode": {
          "description": "RADIO_CBET_MODE_1 Indicates to configure encoder for International (Canada). RADIO_CBET_MODE_2 Indicates Encoder to configure for US region. ",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "RADIO_CBET_MODE_1",
                "RADIO_CBET_MODE_2"
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": "RADIO_CBET_MODE_2"
        },
        "NielsenTimecode": {
          "description": "INSERTER_CLOCK_ALWAYS instructs the encoder to insert the current system clock time in every watermark. Used for real-time encoding. Others are used for test purposes only (INSERTER_CLOCK_ALWAYS, INSERTER_CLOCK_STARTING_TIME, INSERTER_USER_CLOCK_TIME)",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "INSERTER_CLOCK_ALWAYS",
                "INSERTER_CLOCK_STARTING_TIME",
                "INSERTER_USER_CLOCK_TIME"
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": "INSERTER_CLOCK_ALWAYS"
        },
        "NielsenPriorCodeDetection": {
          "description": "Default set to E_OW_MODE. E_OW_MODE Prior Detection mode is for overwrite.  E_SEL_SA_MODE Prior Detection mode is to step aside for selective sids when they appear on same layer of encoding. E_STD_SA_MODE Prior Detection mode is to step aside, if prior watermark detected on same layer of encoding irrespecive of sid.  (E_OW_MODE, E_SEL_SA_MODE, E_STD_SA_MODE)",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "E_OW_MODE",
                "E_SEL_SA_MODE",
                "E_STD_SA_MODE"
              ]
            },
            {
              "type": "null"
            }
          ],
          "default": "E_OW_MODE"
        }
      },
      "additionalProperties": false
    },
    "RaptorPlaylist": {
      "title": "RaptorPlaylist",
      "description": "represents a Playlist, a collection of Events",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "PlaylistID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original Playlist this one was copied or created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlaylistType": {
          "description": "type of playlist",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlaylistType"
            },
            {
              "type": "null"
            }
          ]
        },
        "Priority": {
          "description": "relative priority of playlist",
          "type": "number"
        },
        "Rows": {
          "description": "number of rows in the playlist (Hot Keys Playlist Type)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Columns": {
          "description": "number of columns in the playlist (Hot Keys Playlist Type)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Title": {
          "description": "title of playlist",
          "type": "string"
        },
        "TargetLength": {
          "description": "Playlist TargetLength in seconds.ms",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationID": {
          "description": "stationID who owns the playlist",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "State": {
          "description": "Current state of this playlist",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlaylistState"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduledStartDateTime": {
          "description": "When the Playlist is Scheduled to Start datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduledEndDateTime": {
          "description": "When the Playlist is Scheduled to End datetime ",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ActualStartDateTime": {
          "description": "When the Playlist is Scheduled to Start datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ActualEndDateTime": {
          "description": "When the Playlist is Scheduled to End datetime ",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Triggers": {
          "description": "playlist triggers",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Tags": {
          "description": "tags associated with the station",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Duplicates": {
          "description": "List of playlist IDs who are copies of this playlist",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Events": {
          "description": "(READONLY ARRAY) - details of the list of events in the playlist",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorEvent"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ETMWindow": {
          "description": "ETM Window Properties",
          "$ref": "#/definitions/RaptorETMWindow"
        },
        "HotlineSequence": {
          "description": "Sequence number of the current hotline in this playlist",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Show": {
          "description": "Show",
          "oneOf": [
            {
              "$ref": "#/definitions/Show"
            },
            {
              "type": "null"
            }
          ]
        },
        "RelayCue": {
          "description": "RelayCue, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ShowCode": {
          "description": "ShowCode, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "TrafficLoadBlockNumber": {
          "description": "TrafficLoadBlockNumber",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "BlockData": {
          "description": "All block fields, used for show syndication",
          "oneOf": [
            {
              "$ref": "#/definitions/BlockData"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastModifyDescription": {
          "description": "Description of who made the last modify",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPlaylistArray": {
      "title": "RaptorPlaylistArray",
      "description": "represents an array of playlists",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorPlaylist"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorSyncToPastEventParams": {
      "title": "RaptorSyncToPastEventParams",
      "description": "Object used to pass parameter to the Playlist Sync To Past event operation",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "Station ID, to perform the Sync To Event On",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StartPlaylistID": {
          "description": "Playlist ID, Where to synchronize To (Target Event Playlist)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StartMinSequenceNumber": {
          "description": "Sequence Number synchronizing to (Target Event Sequence Number)",
          "type": "number"
        },
        "EndPlaylistStartTime": {
          "description": "Synchronization time From (present time) (DateTime) in Zulu UTC",
          "type": "string",
          "format": "date-time"
        },
        "MinHardTime": {
          "description": "reset any hardtime event after this time (DateTime) in Zulu UTC, (normally current time stamp)",
          "type": "string",
          "format": "date-time"
        },
        "LastModifyDescription": {
          "description": "Explanation of why we are performing the synchronization",
          "type": "string"
        },
        "StatusCode": {
          "description": "The Status code to set all synchronized event too",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventStatusCode"
            },
            {
              "type": "null"
            }
          ]
        },
        "ErrorCode": {
          "description": "The Error code to set all synchronized event too",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventErrorCode"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorSyncToFutureEventParams": {
      "title": "RaptorSyncToFutureEventParams",
      "description": "Object used to pass parameter to the Playlist Sync To Future event operation",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "Station ID, to perform the Sync To Event On",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StartPlaylistID": {
          "description": "Playlist ID, Where to synchronize From (Original Event Playlist)",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StartMinSequenceNumber": {
          "description": "Sequence Number synchronizing From (Original Event Sequence Number)",
          "type": "number"
        },
        "EndPlaylistStartTime": {
          "description": "Playlist start time to stop at",
          "type": "string",
          "format": "date-time"
        },
        "EndMaxSequenceNumber": {
          "description": "Sequence Number synchronizing To (Target Event Sequence Number, the new hotline)",
          "type": "number"
        },
        "LastModifyDescription": {
          "description": "Explanation of why we are performing the synchronization",
          "type": "string"
        },
        "StatusCode": {
          "description": "The Status code to set all synchronized event too",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventStatusCode"
            },
            {
              "type": "null"
            }
          ]
        },
        "ErrorCode": {
          "description": "The Error code to set all synchronized event too",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventErrorCode"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorRecalcPlaylistReturn": {
      "title": "RecalcPlaylistReturn",
      "description": "Object returned from RecalcPlaylist api",
      "type": "object",
      "properties": {
        "EventID": {
          "description": "EventID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "CalcStartTimeUtc": {
          "description": "Calculated start time",
          "type": "string",
          "format": "date-time"
        },
        "CalcSegueTimeUtc": {
          "description": "Calculated segue time",
          "type": "string",
          "format": "date-time"
        },
        "CalcStopTimeUtc": {
          "description": "Calculated stop time",
          "type": "string",
          "format": "date-time"
        },
        "CalcForResync": {
          "description": "Is this event going to be dropped by a future etm",
          "$ref": "#/definitions/EnumEventResyncType"
        },
        "GapTime": {
          "description": "If an etm event then the gap time for this event",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginalGapTime": {
          "description": "If an etm event then the gap time prior to dropping events",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "PitchlessPlayRate": {
          "description": "Rate (pitchless) the log event is going to play at",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "PitchedPlayRate": {
          "description": "Rate (pitched) the log event is going to play at",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ErrorFlags": {
          "description": "Error flags",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Show": {
      "title": "Show",
      "description": "Show",
      "type": "object",
      "properties": {
        "StreamUrls": {
          "description": "StreamUrls",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ShowID": {
          "description": "ShowID",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SpotBlockIndex": {
      "title": "SpotBlockIndex",
      "description": "SpotBlockIndex",
      "type": "object",
      "properties": {
        "BlockIndex": {
          "description": "BlockIndex",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "BlockData": {
      "title": "BlockData",
      "description": "BlockData",
      "type": "object",
      "properties": {
        "RelayCue": {
          "description": "RelayCue, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ShowCode": {
          "description": "ShowCode, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AffiliateID": {
          "description": "AffiliateID, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Provider": {
          "description": "Provider, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DigitalShowCode": {
          "description": "DigitalShowCode, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DigitalAds": {
          "description": "DigitalAds, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "FillTags": {
          "description": "DigitalAds, used for show syndication",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "LinearAdEvent": {
      "title": "LinearAdEvent",
      "description": "LinearAdEvent",
      "type": "object",
      "properties": {
        "LinearAdData": {
          "description": "LinearAdData",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLinearAdData"
            },
            {
              "type": "null"
            }
          ]
        },
        "NetworkLinearAdData": {
          "description": "NetworkLinearAdData",
          "oneOf": [
            {
              "$ref": "#/definitions/NetworkRaptorLinearAdData"
            },
            {
              "type": "null"
            }
          ]
        },
        "AirStartDateTime": {
          "description": "Time the event started (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "logEventID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "NetworkSpot": {
          "description": "Linear ad is a network spot",
          "type": "boolean"
        },
        "ShowCode": {
          "description": "ShowCode, used for show syndication",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLinearAdReport": {
      "title": "RaptorLinearAdReport",
      "description": "RaptorLinearAdReport",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "Organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "EnterpriseID": {
          "description": "WellKnown Third Party ID",
          "type": "string"
        },
        "StartDateTime": {
          "description": "End datetime (ISO8601) of query for linear report",
          "type": "string"
        },
        "EndDateTime": {
          "description": "End datetime (ISO8601) of query for linear report",
          "type": "string"
        },
        "StationID": {
          "description": "stationID who owns the playlist",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationTimeZone": {
          "description": "The timezone the station is operating under",
          "type": "string"
        },
        "StationCallLetters": {
          "description": "Station Call Letters",
          "type": "string"
        },
        "Events": {
          "description": "represents an array of Linear Ads",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinearAdEvent"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPOIMarkup": {
      "title": "RaptorPOIMarkup",
      "description": "Non-Destructive Markup used for automation playback",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The reference path to a playable file or stream. Generally this is a URI path to a file.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlaybackInputType": {
          "description": "type of file set in the path, BassInternetFile if not set",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumPlaybackInputType"
            },
            {
              "type": "null"
            }
          ]
        },
        "Length": {
          "description": "The length of the full non-destructive markup in seconds.  Use -1.0 for unknown length or play until done. ",
          "type": "number",
          "format": "double"
        },
        "Summary": {
          "description": "String used for summarize how the markup is being used, commonly shows {title} - {artist} of audio being marked up.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "POIMarkers": {
          "description": "The full collection of non-destructive mark up used to identify how to playback the reference path object. Normally this will include FadeIn, Fadeout and Segue POI Markers.",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPOIMarker"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorPOIMarker": {
      "title": "RaptorPOIMarker",
      "description": "Non-Destructive markup used describe how to playback and control the referenced path object or related objects.",
      "type": "object",
      "properties": {
        "POIType": {
          "$ref": "#/definitions/EnumPOIType"
        },
        "Position": {
          "description": "The starting (file) offset in seconds, when to begin execution of the POIMarker",
          "type": "number",
          "format": "double"
        },
        "Duration": {
          "description": "The duration in seconds of how long the POIMarker operation should occur",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "ParamDouble": {
          "description": "Special case reference data that can be passed a numeric value. (Example Pitched Playrate are stored here)",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "ParamString": {
          "description": "Special case reference data that can be passed a string. (Example: Trigger for external Stream)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "POIWatermark": {
          "description": "Parameter that describe where in the associated audio the event can be tracked by watermarking",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorPOIWatermark"
            },
            {
              "type": "null"
            }
          ]
        },
        "VolumeMarkers": {
          "description": "The full collection of non-destructive volume markers used to identify how to adjust the volume over the POI Markup.",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPOIVolume"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Enabled": {
          "description": "Used to enable or disable the POIMarker during the playback process..",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorPOIVolume": {
      "title": "RaptorPOIVolume",
      "description": "Non-Destructive markup used describe to control volume levels",
      "type": "object",
      "properties": {
        "Position": {
          "description": "The Volume Marker offset in seconds, when to begin execution of the POIMarker",
          "type": "number",
          "format": "double"
        },
        "Level": {
          "description": "The target instance volume multiplier to adjust the volume by",
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "RaptorPOIWatermark": {
      "title": "RaptorPOIWatermark",
      "description": "Non-Destructive markup that describe where in the audio a marker  occurs based on audio watermarking",
      "type": "object",
      "properties": {
        "Watermark": {
          "description": "The embedded watermark codeword",
          "type": "string"
        },
        "OffsetInSamples": {
          "description": "Number of samples from the detected water mark, where the POIMarker occurs",
          "type": "integer"
        },
        "OffsetInSeconds": {
          "description": "Number of seconds from the detected water mark, where the POIMarker occurs",
          "type": "number",
          "format": "double"
        },
        "RealtimeTimestamp": {
          "description": "Actual Timestamp when the POI Watermark occured",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    },
    "RaptorPOIPlaybackView": {
      "title": "RaptorPOIPlaybackView",
      "description": "Calculated Playback POI.",
      "type": "object",
      "properties": {
        "Duration": {
          "description": "The duration in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "FadeIn": {
          "description": "The fadeIn position in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "FadeOut": {
          "description": "The fadeOut position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "HighestIntro": {
          "description": "The highest Intro position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "Intro1": {
          "description": "The Intro 1 position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "Intro2": {
          "description": "The Intro 2 position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "Intro3": {
          "description": "The Intro 3 position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "Runtime": {
          "description": "The runtime from TrimIn to Segue or FadeOut + FadeOut duration in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        },
        "Segue": {
          "description": "The segue position from TrimIn in seconds",
          "oneOf": [
            {
              "type": "number",
              "format": "double"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorSequencerEvent": {
      "title": "RaptorSequencerEvent",
      "description": "Configuration and status of input device/sources used be the Raptor Player",
      "type": "object",
      "properties": {
        "PlaylistID": {
          "description": "Raptor The playlistID associated with this sequencer  sequencer data item",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "EventType": {
          "description": "Raptor event type associated with this sequencer  sequencer data item",
          "$ref": "#/definitions/EnumEventType"
        },
        "EventID": {
          "description": "Raptor EventID associated with this sequencer data item",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "AssetID": {
          "description": "Raptor AssetID associated with this sequencer data item",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "StartDateTime": {
          "description": "CALC: Calculated start time of this event",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "StopDateTime": {
          "description": "CALC: Calculated stop time of this event",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "Usually the title of the audio, for other event types it's the event type name",
          "type": "string"
        },
        "Artist": {
          "description": "Artist of the audio event, if not an asset event then it's empty",
          "type": "string"
        },
        "UsableTime": {
          "description": "CALC: The Calculated property, to determine if the event is usable",
          "type": "boolean"
        },
        "Chain": {
          "description": "CALC: Calculated chain for the event, this depends on the mode",
          "$ref": "#/definitions/EnumEventChainType"
        },
        "ResyncType": {
          "description": "CALC: Is this event going to be dropped by an etm event",
          "$ref": "#/definitions/EnumEventResyncType"
        },
        "EtmType": {
          "description": "Filled out if the entry type is an etm, hard, soft, reset, hit etm types",
          "$ref": "#/definitions/EnumEventETMType"
        },
        "StatusCode": {
          "description": "Playlist Event Status Code, used to track the state of the event",
          "$ref": "#/definitions/EnumEventStatusCode"
        },
        "VerifyCode": {
          "description": "Playlist Event Verify Code, used to report verification errors and warnings",
          "$ref": "#/definitions/EnumEventVerifyCode"
        },
        "GapTime": {
          "description": "CALC: The Calculated Gap time associated with this event",
          "type": "number"
        },
        "Elapsed": {
          "description": "CALC: The Calculated elapsed played time associated with this event",
          "type": "number"
        },
        "DurationToSegue": {
          "description": "CALC: The Calculated Position, when the to trigger the segue to the next event",
          "type": "number"
        },
        "DurationToFadeOut": {
          "description": "CALC: The Calculated Position, when the to start fading out the current event",
          "type": "number"
        },
        "PitchlessPlayRate": {
          "description": "Rate (pitchless) the log event is going to play at",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "PitchedPlayRate": {
          "description": "Rate (pitched) the log event is going to play at",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxIntro": {
          "description": "The max intro for the event poi markers",
          "type": "number"
        },
        "PlayerMixer": {
          "description": "CALC: The Calculated Player mixer that is being used to play this sequencer data item",
          "type": "string"
        },
        "TriggerType": {
          "description": "CALC: The Calculated enum, used to determine how the event should be started",
          "$ref": "#/definitions/EnumEventTriggerType"
        },
        "Triggers": {
          "description": "CALC: The Calculated event this item triggers",
          "type": "string"
        },
        "TriggeredBy": {
          "description": "CALC: The Calculated event that will trigger this item",
          "type": "string"
        },
        "ChildItems": {
          "description": "(READONLY ARRAY) - Array of item's children",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorSequencerEvent"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "TotalChildren": {
          "description": "Total number of events in ChildItems",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayingChildPosition": {
          "description": "Index in ChildItems for the playing event",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeID": {
          "description": "Raptor AssetTypeID for the assigned asset",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerStartAcks": {
          "description": "PlayerStartAcks",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerLoadAcks": {
          "description": "FirstPlayerLoadAck",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "ReferenceEvent": {
          "description": "ReferenceEvent",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "TargetDuration": {
          "description": "TargetDuration",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginID": {
          "description": "Reference to the Original Event this one was created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorSequencerSnapshot": {
      "title": "RaptorSequencerSnapshot",
      "description": "Data used to notify, the current state of a sequencer scheduler engine",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the sequencer snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "StationID": {
          "description": "ID of the Station being used",
          "type": "string",
          "format": "guid"
        },
        "OrganizationID": {
          "description": "ID of the OrganizationID being used",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationName": {
          "description": "Name of the Station being used",
          "type": "string"
        },
        "SequencerLeader": {
          "description": "The current Sequencer leader for the station",
          "$ref": "#/definitions/RaptorSequencerConfig"
        },
        "SequencerVersion": {
          "description": "The sequencers version",
          "type": "string"
        },
        "SequencerTimeZone": {
          "description": "The timezone the sequencer is operating under",
          "type": "string"
        },
        "SequencerMode": {
          "description": "The current mode the sequence station is in",
          "$ref": "#/definitions/EnumSequencerMode"
        },
        "SequencerStatus": {
          "description": "The current mode the sequence station is in",
          "$ref": "#/definitions/EnumSequencerStatus"
        },
        "QueueSize": {
          "description": "The Current size of the sequencer in memory queue",
          "type": "integer"
        },
        "PendingCount": {
          "description": "How many pending played items the sequencer has loaded in memory",
          "type": "integer"
        },
        "Paused": {
          "description": "Is the sequencer paused, if paused it won't auto start future events",
          "type": "boolean"
        },
        "WaitingOnEtm": {
          "description": "Filled out if we are not playing some an event because we are waiting on the next etm event to execute",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "GapTimeTargetDateTime": {
          "description": "Time of the next etm event",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "GapTimeCalcStartDateTime": {
          "description": "Fixed out if not playing an event, ui will count gap time up from this time",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "GapTime": {
          "description": "Filled out for etm events, how much the prior audio events are under filled or over filled compared to the etm time",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Hotlines": {
          "description": "(READONLY ARRAY) - Array of active sequencer hotlines",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorSequencerHotline"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "SplitMasterStationGuid": {
          "description": "ID of this stations master station",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlaylistStreamUrl": {
          "description": "PlaylistStreamUrl",
          "type": "string"
        },
        "Items": {
          "description": "(READONLY ARRAY) - Array of sequencer data items",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorSequencerEvent"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorSequencerHotline": {
      "title": "RaptorSequencerHotline",
      "description": "Hotline used to track what the hotline is for a playlist",
      "type": "object",
      "properties": {
        "PlaylistID": {
          "description": "Raptor The playlistID associated with this sequencer  sequencer data item",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "HotlineSequence": {
          "description": "Sequence number of the current hotline in this playlist",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SplitEventCommand": {
      "title": "SplitEventCommand",
      "description": "Message converted from Zetta msg to Raptor",
      "type": "object",
      "properties": {
        "SplitEventType": {
          "description": "SplitEventType",
          "$ref": "#/definitions/EnumSplitCommand"
        },
        "SplitEventLogEventType": {
          "description": "SplitLogEventType",
          "$ref": "#/definitions/EnumEventType"
        },
        "SplitEventID": {
          "description": "EventId linked to Zetta",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "SplitEventLength": {
          "description": "Length of event in Zetta",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "SplitEventDateTime": {
          "description": "Time of event to match on (match etm time for spot blocks)",
          "type": "string",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    },
    "RaptorSequencerConfig": {
      "title": "RaptorSequencerConfig",
      "description": "Sequencer detailed configuration.",
      "type": "object",
      "properties": {
        "SequencerKey": {
          "description": "Unique Key, used to track and identify a specific Raptor Sequencer, If a Cloud Sequencer keep Kubernetes complient limit to 10 Characters, will Normally match the PlayerKey and LocationKey",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "SequencerEnabled": {
          "description": "Used to define if the sequencer is currently being used",
          "type": [
            "boolean"
          ],
          "default": true
        },
        "SequencerRank": {
          "description": "relative priority of the sequencer, 1st, 2nd, 3rd...",
          "type": "number"
        },
        "SequencerVersion": {
          "description": "The sequencers current or last known version",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "RealtimeRole": {
          "description": "The last known role the sequence configuration data was taken",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumSequencerRole"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastPlayedEventID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "RealtimeTimestamp": {
          "description": "Timestamp when the sequencer configuration data was taken",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorStationAsset": {
      "title": "RaptorStationAsset",
      "description": "RaptorStationAsset",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "AssetID": {
          "description": "AssetID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "StationID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "Active": {
          "description": "primary title of asset",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "StartDateTime": {
          "description": "start datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EndDateTime": {
          "description": "end datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeID": {
          "description": "asset type",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "DisplayTitle": {
          "description": "Title used for export (in band metadata, now playing export)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DisplayArtist": {
          "description": "Artist used for export (in band metadata, now playing export)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "HourRestriction": {
          "description": "HourRestriction",
          "oneOf": [
            {
              "$ref": "#/definitions/HourRestriction"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "HourRestriction": {
      "title": "HourRestriction",
      "description": "HourRestriction",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name",
          "type": "string"
        },
        "Monday": {
          "description": "Monday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Tuesday": {
          "description": "Tuesday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Wednesday": {
          "description": "Wednesday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Thursday": {
          "description": "Thursday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Friday": {
          "description": "Friday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Saturday": {
          "description": "Saturday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Sunday": {
          "description": "Sunday hour restrictions",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorStationsAsset": {
      "title": "RaptorStationsAsset",
      "description": "RaptorStationsAsset",
      "type": "object",
      "properties": {
        "StationIDs": {
          "description": "List of Station IDs",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "guid",
                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "StationAsset": {
          "description": "Station asset values",
          "$ref": "#/definitions/RaptorStationAsset"
        }
      }
    },
    "RaptorStation": {
      "title": "RaptorStation",
      "description": "represents a radio Station, owns assets",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "unique id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "OriginID": {
          "description": "Reference to the Original Station this one was copied or created from",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginDeploymentKey": {
          "description": "The deployment key where the record originated - Used to track reconcilation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OriginEnum": {
          "description": "Where did this object originate, Cloud vs Edge",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumOrigin"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationName": {
          "description": "Station name",
          "type": "string"
        },
        "ConstantName": {
          "description": "Immutable human-readable identifier",
          "type": "string"
        },
        "StationCallLetters": {
          "description": "Station Call Letters",
          "type": "string"
        },
        "StationDescription": {
          "description": "Description for the station",
          "type": "string"
        },
        "StationTimeZone": {
          "description": "station time zone in UTC with offset",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "LeaderSequencerKey": {
          "description": "The Sequencer that has been elected as the Leader",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationStatus": {
          "description": "station status",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumStationConfigStatus"
            },
            {
              "type": "null"
            }
          ]
        },
        "Cluster": {
          "title": "Cluster",
          "description": "Configure primary, secondary (optional) and current cluster",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorCluster"
            }
          ]
        },
        "Mixers": {
          "description": "(OBSOLETE 2020-03-01) Configuration of multiple playback mixer (a collection input and output) devices being used by the raptor player",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorPlayerMixerConfig"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerDictionary": {
          "description": "[Deployment Dictionary] A Dictionary of all core application deployments (Player/Sequencer/...), The Dictionary Key is the PlayerKey aka DeploymentKey(ZMQLocationKey)",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorPlayerConfigDictionary"
            }
          ]
        },
        "GPIODeviceDictionary": {
          "description": "A Configuration Dictionary of all gpio devices, being used by this station",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorGPIODeviceDictionary"
            }
          ]
        },
        "ExternalIDs": {
          "description": "external ids associated with a stations (Depreciated 2019-07-01)",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorTypeValuePair"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "ThirdPartyIDs": {
          "description": "Stores Third Party Ids, used for referencing third party systems, associated with a stations, Please Use Recommending Naming Convention {Application}_{CustomField}",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorStationThirdPartyReferences"
            },
            {
              "type": "null"
            }
          ]
        },
        "Tags": {
          "description": "tags associated with the station",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "Paused": {
          "description": "is Station in Paused State?",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationMode": {
          "description": "Current station mode",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumSequencerMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "AvailableModes": {
          "description": "Modes Available in the GUI for this station",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumSequencerMode"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "FillHistoryLength": {
          "description": "Length of history fetched for fill",
          "default": 1200,
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "Traffic": {
          "description": "Traffic config",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorStationTrafficConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "Billboards": {
          "description": "Billboard outputs",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RaptorStationBillboardConfig"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "AutoFade": {
          "description": "Is auto fade at segue enabled for this station",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumSequencerAutoFade"
            },
            {
              "type": "null"
            }
          ]
        },
        "FadeLength": {
          "description": "Length of auto fade",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "NormalizationTarget": {
          "description": "Length of auto fade",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "BedDuckingLevel": {
          "description": "Ducking Level for Beds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZettaSplitReceiver": {
          "description": "Should we start a tcp listener to receive split command from zetta",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumZettaSplitReceiver"
            },
            {
              "type": "null"
            }
          ]
        },
        "SplitMasterStationID": {
          "description": "stationID of the split master",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "OverrideSequencerSettings": {
          "description": "Override dictionary used to define Custom sequencer configuration that might be overwritten on a station",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorOverrideDictionary"
            },
            {
              "type": "null"
            }
          ]
        },
        "OverrideAssetTypeSettings": {
          "description": "Asset Type Settings",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorOverrideAssetTypeDictionary"
            }
          ]
        },
        "LastModifyDescription": {
          "description": "Description of who made the last modify",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SoftEtmEarlyWindow": {
          "description": "Allow future events to start if within this window",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "SoftEtmLateWindow": {
          "description": "Allow to skip events beyond of this window",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "GSelectorSettings": {
          "description": "Raptor GSelector Settings",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorGSelectorSettings"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxStretchPercent": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxSqueezePercent": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "ApplyStretchSqueezeWithinSoftETMWindow": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "EmergencyPlaylistID": {
          "description": "EmergencyPlaylistID",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "EtmFillTags": {
          "description": "EtmFillTags",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "BlockFillTags": {
          "description": "BlockFillTags",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "Market": {
          "description": "Market",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StreamID": {
          "description": "StreamID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputIcyTitleTemplate": {
          "description": "Stores a template, InBandMetadata for publishing IcyTitle, Disable InbandMetadata by setting OutputIcyTitleTemplate and OutputIcyTitleTemplate to Null or empty!",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OutputIcyURLTemplate": {
          "description": "Stores a template, InBandMetadata for publishing IcyUrl, Disable InbandMetadata by setting OutputIcyTitleTemplate and OutputIcyTitleTemplate to Null or empty!",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "LinearAdsEnabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "SpotAssetType": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "EASTestLength": {
          "description": "EASTestLength",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxBlockStretchPercent": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "MaxBlockSqueezePercent": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "IotCoreMessaging": {
          "description": "IotCoreMessaging",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorStationArray": {
      "title": "RaptorStationArray",
      "description": "Represents an array of stations",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorStation"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorStationBillboardConfig": {
      "description": "Raptor Billboard configuration parameters",
      "type": "object",
      "properties": {
        "BillboardEnabled": {
          "description": "whether or not the billboard is to output data or not",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardUrl": {
          "desription": "url to post to",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardXslt": {
          "desription": "xslt to apply if going to zetta full xml",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardType": {
          "description": "output format",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumZettaBillboardType"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardHTTPMethod": {
          "description": "HTTP Method",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumZettaBillboardHTTPMethod"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardCount": {
          "description": "number of items to output",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "BillboardDelay": {
          "description": "delay in milliseconds",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorStationTrafficConfig": {
      "description": "Raptor Traffic configuration parameters",
      "type": "object",
      "properties": {
        "SystemName": {
          "desription": "Traffic System Name",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorStationThirdPartyReferences": {
      "title": "RaptorStationThirdPartyReferences",
      "description": "Wellknown or Custom Third Party Ids used on Stations for referencing external third party systems",
      "type": "object",
      "properties": {
        "IHM_EnterpriseID": {
          "description": "WellKnown Third Party ID, used to store IHM_EnterpriseID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PREMIERE": {
          "description": "WellKnown Third Party ID, used to store PREMIERE AFFILIATEID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "WESTWOOD1": {
          "description": "WellKnown Third Party ID, used to store WESTWOOD1 AFFILIATEID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SKYVIEW": {
          "description": "WellKnown Third Party ID, used to store SKYVIEW AFFILIATEID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorGSelectorSettings": {
      "description": "Raptor GSelector Settings",
      "type": "object",
      "properties": {
        "EnableOldRotations": {
          "description": "Option to enable GS based Rotations",
          "default": false,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastAssetsSynchronizedDate": {
          "description": "Timestamp when job ran its last assets synchronization (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastScheduleSynchronizedDate": {
          "description": "Timestamp when job ran its last schedule synchronization (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ServiceAddress": {
          "description": "GSelector IPAddress",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "HotlineSkipEventsCount": {
          "description": "HotlineSkipEventsCount",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "GSDatabaseInfo": {
          "description": "GSelector Database on that server",
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "Description": {
                  "description": "GSelector Database Description",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "Server": {
                  "description": "GSelector Database Server",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "Instance": {
                  "description": "GSelector Database Instance",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "Name": {
                  "description": "GSelector Database Name",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "Guid": {
                  "description": "Database GUID",
                  "type": "string",
                  "format": "guid",
                  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "GSStationInfo": {
          "description": "GSelector station properties",
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "ID": {
                  "description": "GSelector Station ID",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "Name": {
                  "description": "GSelector Station Name",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "CallLetters": {
                  "description": "GSelector Station Call Letters",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "LicenseExpiryDate": {
                  "description": "GSelector License Expiry Date",
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "date-time"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "MergeExistingHours": {
          "description": "Option to enable merging of schedule",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "PreserveAllEventsNotOriginatingFromGSelectorOnMerge": {
          "description": "Option to enable the preserving of all events originating outsize of GS during the merging of schedule",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "SkipShowPlaylists": {
          "description": "Option to disable skipping show playlists",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "MergeByAssetIDsOnNoEventIDMatches": {
          "description": "Option to enable the merge by AssetIDs when not even a signle eventID match is found",
          "default": true,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "MergeByAssetIDsOnNoEventIDMatchesThresholdPercent": {
          "description": "Specifies the percent of AssetID matches that shuld be passed to perform merge by AssetIDs. If null defaults to 50%. If less than 1 - always attempt to merge by AssetIDs.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "RaptorUser": {
      "title": "RaptorUser",
      "description": "User schema exchanged between User API and UI",
      "type": "object",
      "properties": {
        "profile": {
          "description": "user profile, includes user details",
          "type": "object",
          "properties": {
            "login": {
              "description": "login (email)",
              "type": "string"
            },
            "firstName": {
              "description": "users first name",
              "type": "string"
            },
            "lastName": {
              "description": "users last name",
              "type": "string"
            },
            "email": {
              "description": "users email (usually same as login)",
              "type": "string"
            },
            "organizationId": {
              "description": "organization to which the user belongs",
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "userType": {
              "description": "user type",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    "RaptorUserToken": {
      "title": "RaptorUserToken",
      "description": "Schema returned for a token request",
      "type": "object",
      "properties": {
        "id": {
          "description": "OKTA user id",
          "type": "string"
        },
        "login": {
          "description": "login name",
          "type": "string"
        },
        "organizationId": {
          "description": "organization ID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "status": {
          "description": "status (ACTIVE, INACTIVE)",
          "type": "string"
        },
        "access_token": {
          "description": "a really looong string, which is really a token",
          "type": "string"
        },
        "token_type": {
          "description": "Bearer | Basic",
          "type": "string"
        },
        "expires_in": {
          "description": "how long is the token valid",
          "type": "number"
        },
        "scope": {
          "description": "scope",
          "type": "string"
        },
        "redirect_api_url": {
          "description": "redirect url for appropriate api destination",
          "type": "string"
        },
        "redirect_api_key": {
          "description": "api key for the redirected api destination",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorCredentials": {
      "title": "RaptorCredentials",
      "description": "Credentials schema, username and password",
      "type": "object",
      "properties": {
        "userName": {
          "description": "user name",
          "type": "string"
        },
        "password": {
          "description": "password",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorEncryptedCredentials": {
      "title": "RaptorCredentials",
      "description": "Credentials schema, username and password",
      "type": "object",
      "properties": {
        "userName": {
          "description": "user name",
          "type": "string"
        },
        "password": {
          "description": "password",
          "type": "string"
        },
        "ivString": {
          "description": "16-bit string for secure data transfer",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorEncryptedUser": {
      "title": "RaptorEncryptedUser",
      "description": "Returns a unique initialization vector string and encrypted user data",
      "type": "object",
      "properties": {
        "ivString": {
          "description": "ivString",
          "type": "string"
        },
        "user": {
          "description": "RaptorUser Object that is AES256 Encrypted",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorDevice": {
      "title": "RaptorDevice",
      "description": "Device schema exchanged between User API and Consumers",
      "type": "object",
      "properties": {
        "id": {
          "description": "device id",
          "type": "string"
        },
        "code": {
          "description": "device code",
          "type": "string"
        },
        "description": {
          "description": "device description",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "organizationId": {
          "description": "organization to which the user belongs",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorDeviceToken": {
      "title": "RaptorDeviceToken",
      "description": "Schema returned for a token request",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "device id",
          "type": "string"
        },
        "id": {
          "description": "OKTA id",
          "type": "string"
        },
        "organizationId": {
          "description": "organization ID",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "status": {
          "description": "status (ACTIVE, INACTIVE)",
          "type": "string"
        },
        "access_token": {
          "description": "a really looong string, which is really a token",
          "type": "string"
        },
        "token_type": {
          "description": "Bearer | Basic",
          "type": "string"
        },
        "expires_in": {
          "description": "how long is the token valid",
          "type": "number"
        },
        "scope": {
          "description": "scope",
          "type": "string"
        },
        "redirect_api_url": {
          "description": "redirect url for appropriate api destination",
          "type": "string"
        },
        "redirect_api_key": {
          "description": "api key for the redirected api destination",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RaptorGSSchedSyncRequest": {
      "title": "RaptorGSSchedSyncRequest",
      "description": "GS Schedule sync request ",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "StationID": {
          "description": "station id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "DateAndHours": {
          "description": "The Dateandhours Schema",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "SkipExistingHours": {
          "description": "Skip existing hours if schedule exists",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MusicPointConfig": {
      "title": "MusicPointConfig",
      "description": "MusicPoint End Point Configuration",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "https://musicpoint-api.domain.com"
        },
        "apikey": {
          "type": "string",
          "description": "OxyQnplsWmxxxxxxxxxxxxxxxxxxxxJz2mW0M1q4"
        }
      },
      "additionalProperties": false
    },
    "MusicPointSong": {
      "title": "MusicPointSong",
      "description": "MusicPoint Song used in search",
      "type": "object",
      "properties": {
        "ccid": {
          "type": "string",
          "description": "Example: 746449"
        },
        "title": {
          "type": "string",
          "description": "Example: MY TOWN"
        },
        "artist": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: Buck-O-Nine"
        },
        "album": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: Twenty-Eight Teeth"
        },
        "versionMix": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "mediaBaseId": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 1167456"
        },
        "iHeartRadioProductId": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 2316562"
        },
        "ihmdateReleased": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "YYYY-MM-DD HH:MM:SS.TTT, Example: 1999-08-11 00:00:00.000"
        },
        "updatedDateTime": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "YYYY-MM-DD HH:MM:SS.TTT, Example: 2018-01-30 19:35:38.913"
        }
      },
      "additionalProperties": false
    },
    "MusicPointSongDetail": {
      "title": "MusicPointSongDetail",
      "description": "MusicPoint Song, GET /songs/{MusidPointID}",
      "type": "object",
      "properties": {
        "ccid": {
          "type": "string",
          "description": "Example: 746449"
        },
        "title": {
          "type": "string",
          "description": "Example: MY TOWN"
        },
        "artist": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: Buck-O-Nine"
        },
        "albumTitle": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: Twenty-Eight Teeth"
        },
        "duration": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "HH:MM:SS.TTT, Example: 00:03:31:100"
        },
        "versionMix": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "albumArt": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: http://image.iheart.com/content/music/prod/Orchard15/Thumb_Content/Full_PC/Orchard/Jun15/062915d/884385035181/884385035181.jpg"
        },
        "rating": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "license": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "mediaBaseId": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 1167456"
        },
        "country": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: US"
        },
        "composer": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "soundCode": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "comments": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "additionalComments": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ihmDateRecorded": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "YYYY-MM-DD HH:MM:SS.TTT, Example: 2013-08-06 11:34:59.000"
        },
        "ihmDateReleased": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "YYYY-MM-DD HH:MM:SS.TTT, Example: 1999-08-11 00:00:00.000"
        },
        "yearCharted": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 2001"
        },
        "yearReleased": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 1997"
        },
        "isrc": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: US-TV1-98-00060"
        },
        "opening": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: C"
        },
        "ending": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: C"
        },
        "trimIn": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Time in MS, Example: 5697"
        },
        "trimOut": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Time in MS, Example: 5697"
        },
        "intro1": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Time in MS, Example: 5697"
        },
        "intro2": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Time in MS, Example: 5697"
        },
        "intro3": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Time in MS, Example: 5697"
        },
        "ihrProductId": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Example: 2316562"
        },
        "recordLabel": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "nextToPlay": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "HH:MM:SS.TTT, Example: 00:03:28:413"
        },
        "updatedDateTime": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "YYYY-MM-DD HH:MM:SS.TTT, Example: 2018-01-30 19:35:38.913"
        },
        "status": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "(1 New, 2 Active, 3 Expired), Example: 2"
        }
      },
      "additionalProperties": false
    },
    "MusicPointSongFileResult": {
      "title": "MusicPointGetFileResult",
      "description": "Download url from a file request, GET /songs/{MusidPointID}/file",
      "type": "object",
      "properties": {
        "song_download_url": {
          "description": "Signed Url to the file",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MusicPointSearchRequest": {
      "title": "MusicPointGetFileResult",
      "description": "Download url from a file request, GET /songs/{MusidPointID}/file",
      "type": "object",
      "properties": {
        "searchText": {
          "description": "Example: Live",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ccid": {
          "description": "Example: 746449",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "mediaBaseId": {
          "description": "Integer, Example: 123456",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "description": "(1 New, 2 Active, 3 Expired), Example: 2",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "sort": {
          "description": "Example: Title",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "releaseDate": {
          "from": {
            "description": "YYYY-MM-DD HH:MM:SS, Example: 2018-01-30 19:35:38",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "to": {
            "description": "YYYY-MM-DD HH:MM:SS, Example: 2018-01-30 23:59:59",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "additionalProperties": false
    },
    "MusicPointSearchResult": {
      "title": "MusicPointSearchResult",
      "description": "Result from MusicPoint search",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MusicPointSong"
          }
        },
        {
          "type": "null"
        }
      ],
      "additionalProperties": false
    },
    "RaptorGPIODeviceDictionary": {
      "title": "RaptorGPIODeviceDictionary",
      "description": "Contains a dictionary of (G)eneral (P)urpose (I)nput (O)utput + (R)oute Objects",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorGPIODevice"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorGPInputDictionary": {
      "title": "RaptorGPInputDictionary",
      "description": "NOT IMPLIMENTED - Contains a dictionary of (G)eneral (P)urpose (I)nput Objects - NOT IMPLIMENTED PLACE HOLDER",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorGPInput"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorGPOutputDictionary": {
      "title": "RaptorGPOutputDictionary",
      "description": "NOT IMPLIMENTED - (G)eneral (P)urpose (O)utput Objects",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorGPOutput"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorGPRouteDictionary": {
      "title": "RaptorGPRouteDictionary",
      "description": "(G)eneral (P)urpose (R)oute Objects",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorGPRoute"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorGPIODevice": {
      "title": "RaptorGPIODevice",
      "description": "(G)eneral (P)urpose (I)nput (O)utput + (R)oute Device",
      "type": "object",
      "properties": {
        "GPIODeviceKey": {
          "description": "Unique Key, used to track and identify a specific GPIO Device",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "GPIOName": {
          "description": "Descriptive Name of the GPIO Object",
          "type": "string"
        },
        "GPIODeviceType": {
          "description": "Technology implimenting the GPRoute",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumGPIODeviceType"
            }
          ]
        },
        "GPIOEnabled": {
          "description": "Used to define if the GPIO is currently being used",
          "type": [
            "boolean"
          ],
          "default": true
        },
        "GPRouteDictionary": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorGPRouteDictionary"
            }
          ]
        },
        "GPInputDictionary": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorGPInputDictionary"
            }
          ]
        },
        "GPOutputDictionary": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorGPOutputDictionary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorGPRoute": {
      "title": "RaptorGPRoute",
      "description": "(G)eneral (P)urpose (R)oute",
      "type": "object",
      "properties": {
        "GPRouteKey": {
          "description": "Unique Key, used to track and identify a specific GPIO Route",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "GPRName": {
          "description": "Descriptive of the GPRoute Object",
          "type": "string"
        },
        "GPRType": {
          "description": "Technology implimenting the GPRoute",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumGPRType"
            }
          ]
        },
        "GPRState": {
          "description": "Enum to define if the state of the GPRoute, on or off",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumGPRState"
            }
          ]
        },
        "GPRUrl": {
          "description": "Used to define if the GPRoute is currently being used",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorGPInput": {
      "title": "RaptorGPInput",
      "description": "NOT IMPLIMENTED - (G)eneral (P)urpose (I)nput",
      "type": "object",
      "properties": {
        "GPInputKey": {
          "description": "Unique Key, used to track and identify a specific GPIO Input",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "GPIName": {
          "description": "Descriptive of the GPInput Object",
          "type": "string"
        },
        "GPIType": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumGPIType"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorGPOutput": {
      "title": "RaptorGPOutput",
      "description": "NOT IMPLIMENTED - (G)eneral (P)urpose (O)utput",
      "type": "object",
      "properties": {
        "GPOutputKey": {
          "description": "Unique Key, used to track and identify a specific GPIO Output",
          "type": "string",
          "pattern": "^[A-Za-z0-9_-]{1,40}$"
        },
        "GPOName": {
          "description": "Descriptive of the GPOutput Object",
          "type": "string"
        },
        "GPOType": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumGPOType"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "EnumGPIODeviceType": {
      "title": "EnumGPIODeviceType",
      "description": "Enum - (G)eneral (P)urpose (Input) (O)utput + (R)oute Device Types",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "RaptorPlayer"
      ],
      "examples": [
        "0 = Invalid",
        "1 = RaptorPlayer - a Virtual Device, that impliments the Raptor Player Messaging API"
      ]
    },
    "EnumGPRType": {
      "title": "EnumGPRType",
      "description": "Enum - (G)eneral (P)urpose (R)oute Types",
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "x-enumNames": [
        "Invalid",
        "AudioStreamURL"
      ],
      "examples": [
        "0 = Invalid",
        "1 = AudioStreamURL"
      ]
    },
    "EnumGPIType": {
      "title": "EnumGPRType",
      "description": "NOT IMPLIMENTED - Enum - (G)eneral (P)urpose (I)nput Types ",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "TCP",
        "UDP",
        "HTTP"
      ],
      "examples": [
        "0 = Invalid",
        "1 = TCP",
        "2 = UDP",
        "3 = HTTP"
      ]
    },
    "EnumGPOType": {
      "title": "EnumGPRType",
      "description": "NOT IMPLIMENTED - Enum - (G)eneral (P)urpose (O)utput Types",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "TCP",
        "UDP",
        "HTTP"
      ],
      "examples": [
        "0 = Invalid",
        "1 = TCP",
        "2 = UDP",
        "3 = HTTP"
      ]
    },
    "EnumGPRState": {
      "title": "EnumGPRState",
      "description": "Enum - (G)eneral (P)urpose (R)oute State",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "On",
        "Off"
      ],
      "examples": [
        "0 = Invalid (unknown)",
        "1 = On",
        "2 = Off"
      ]
    },
    "RaptorChange": {
      "title": "RaptorChange",
      "description": "represents a list of changes for a given subscriber",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "ChangeID": {
          "description": "change id",
          "type": "string"
        },
        "SubscriberID": {
          "description": "subscriber id",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Description": {
          "description": "change description",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Type": {
          "description": "Change types that the subscriber is interested in",
          "$ref": "#/definitions/EnumRaptorChangeType"
        },
        "TypeID": {
          "description": "id for the change type, example assetID, eventID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Data": {
          "description": "data associated with that change type",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorChangeArray": {
      "title": "RaptorChangeArray",
      "description": "represents an array of changes",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorChange"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorChangeSubscriber": {
      "title": "RaptorChangeSubscriber",
      "description": "represents a parent Asset containing fixed fields and fields a station can override",
      "type": "object",
      "properties": {
        "OrganizationID": {
          "description": "Organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "SubscriberID": {
          "description": "Change subscriber id",
          "type": "string"
        },
        "SubscriberName": {
          "description": "change subscriber name",
          "type": "string"
        },
        "LastChangeID": {
          "description": "Last Change ID",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "Subscriptions": {
          "description": "Change types that the subscriber is interested in",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumRaptorChangeType"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "KillDateTime": {
          "description": "READONLY, ISODate when register will be removed in not re-registered.",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "HistoryLimit": {
          "description": "READONLY, Max history that can be saved",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastModifyDescription": {
          "description": "Description of who made the last modify",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorChangeEventData": {
      "title": "RaptorChangeEventData",
      "description": "represents a list of changes for a given subscriber",
      "type": "object",
      "properties": {
        "StationID": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "ScheduledStartDateTime": {
          "description": "Date and Hour of the Event",
          "type": "string",
          "format": "date-time"
        },
        "OnlyTransitions": {
          "description": "subscriber id",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "RaptorChangeAssetData": {
      "title": "RaptorChangeAssetData",
      "description": "Custom Data for Asset Changes",
      "type": "object",
      "properties": {},
      "additionalProperties": false
    },
    "RaptorLocalizerConfig": {
      "title": "RaptorLocalizerConfig",
      "description": "Configuration of the localizer Service. Within a org/station/player context",
      "type": "object",
      "properties": {
        "LocalizePath": {
          "description": "Path to where we will be localizing content",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "LocalizeMethod": {
          "description": "Enumeration defining the current Localizer mode:  ScheduledAssets, StationAssets.",
          "$ref": "#/definitions/EnumLocalizeMethod",
          "default": 2
        },
        "LocalizeContentPlaylistSpanHours": {
          "description": "How many hours station playlist should we localize (Default 1 Hours)",
          "type": "integer",
          "default": 1
        },
        "LocalizeContentExpireAfterHours": {
          "description": "How long are localized assets allowed to live in the localizer cache (Default 3 Hours)",
          "type": "integer",
          "default": 3
        },
        "LocalizeReplicationExpireAfterHours": {
          "description": "How long are localized assets allowed to live in the localizer cache (Default 168 Hours or 7 Days)",
          "type": "integer",
          "default": 168
        },
        "LocalizeVerifyScheduledPlaylistAssetsIntervalSeconds": {
          "description": "How often should we perform Scheduled Playlist Asset Verification, ie look for changes (Default every 1800 seconds, 30 minutes intervals)",
          "type": "integer",
          "default": 1800
        },
        "LocalizeContentReportIntervalSeconds": {
          "description": "How often should we perform a localize content store drive and directory report (Default every 300 seconds)",
          "type": "integer",
          "default": 300
        },
        "LocalizeHeartbeatIntervalSeconds": {
          "description": "How often should we perform Notify Heartbeats, ie look for changes (Default every 60 seconds, 1 minutes intervals)",
          "type": "integer",
          "default": 60
        },
        "LocalizeMetricIntervalSeconds": {
          "description": "How often should we perform publish metrics to New Relice, ie look for changes (Default 300 seconds, 5 minute intervals)",
          "type": "integer",
          "default": 300
        },
        "LocalizeExpireIntervalSeconds": {
          "description": "How often should we perform expire file verification, ie look for old files in the content store changes (Default every 1800 seconds, 30 minutes intervals)",
          "type": "integer",
          "default": 1800
        },
        "LocalizingQueueNextSampleSize": {
          "description": "How many current/future stating queue items should we send in a snapshot (Default Next 20)",
          "type": "integer",
          "default": 20
        },
        "LocalizingQueuePastSampleSize": {
          "description": "How many history/past staging queue items should we send in a snapshot (Default Past 5)",
          "type": "integer",
          "default": 5
        }
      },
      "additionalProperties": false
    },
    "RaptorLocalizerSnapshot": {
      "title": "RaptorLocalizerSnapshot",
      "description": "Current Localizer snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimeLocalizerRoute": {
          "description": "The Localizer Messageing Route (ZMQ Topic)",
          "type": "string"
        },
        "RealtimeLocalizerKey": {
          "description": "The localizer key that should be used for this localizer Instance (part of ZMQ Topic), this is generally the playerkey",
          "type": "string"
        },
        "RealtimeVersion": {
          "description": "Localizer version at the time the snapshot was taken",
          "type": "string"
        },
        "RealtimeQueueSize": {
          "description": "The Current size of the Active processing queue",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "integer"
            }
          ]
        },
        "LastScheduleVerifyDateTime": {
          "description": "Timestamp when localizer ran its last verification",
          "type": "string",
          "format": "date-time"
        },
        "NextScheduleVerifyDateTime": {
          "description": "The next time verification tasks are scheduled to run",
          "type": "string",
          "format": "date-time"
        },
        "NextStoreVerifyDateTime": {
          "description": "The next time verification tasks to run on the localize store (file expiration)",
          "type": "string",
          "format": "date-time"
        },
        "RealtimeLocalizingStoreReport": {
          "description": "Optional: Detailed information about the localizer store information",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorAPIContentManagementFileStoreInfoResponse"
            }
          ]
        },
        "RealtimeLocalizeStagingReport": {
          "description": "Optional: Quick summary of what is happening on the localize staging system",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLocalizeStagingReport"
            },
            {
              "type": "null"
            }
          ]
        },
        "RealtimeSampleLocalizeStagingQueue": {
          "description": "Optional: Partial into the Staging sytem processing queue",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLocalizeStagingItemSnapshotDictionary"
            },
            {
              "type": "null"
            }
          ]
        },
        "LocalizerConfig": {
          "description": "Optional: Current Localizer Configuration and Settings",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLocalizerConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLocalizeItem": {
      "title": "RaptorLocalizeItem",
      "description": "Localization of an asset",
      "type": "object",
      "properties": {
        "LocalizeStatus": {
          "description": "Enumeration defining the current Status of the localize item, Scheduled, Running, Error, Completed..",
          "$ref": "#/definitions/EnumLocalizeStatus"
        },
        "LocalizedBy": {
          "description": "What feature is requesting the localization",
          "type": "string"
        },
        "NeededBy": {
          "description": "Timestamp when the file needs to be localized, used to order priority of localizing assets",
          "type": "string",
          "format": "date-time"
        },
        "Priority": {
          "description": "Number used to priorities, localize items with the same NeededBy Timestamp",
          "type": "number",
          "default": 1
        },
        "OrganizationID": {
          "description": "Optional Reference, The OrganizationID that should be used for this localizer Instance (part of ZMQ Topic)",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationID": {
          "description": "Optional Reference, The StationID that should be used for this localizer Instance (part of ZMQ Topic)",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "LocalizerKey": {
          "description": "Optional Reference, to the localizer key that should be used for this localizer Instance (part of ZMQ Topic)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlaylistID": {
          "description": "Optional Reference, to the PlaylistID, of the asset being localized ",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventID": {
          "description": "Optional Reference, to the Playlist EventID, of the asset being localized",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "EventType": {
          "description": "The playlist event type, like: Play Asset, Spot Block, ETM...",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumEventType"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetID": {
          "description": "The AssetID of the Asset File being localized",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetMD5": {
          "description": "The File MD5 of the asset File being localized",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "AssetTypeID": {
          "description": "Optional Reference, to the Asset AssetTypeID, of the asset being localized",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "Asset": {
          "description": "(Optional ReadOnly) Asset data if available ",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "LocalizedPath": {
          "description": "Optional Reference, the local file path were the download file will be cached for reference and playback",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DownloadPath": {
          "description": "Optional Reference, to the Url where the localize content file should be downloaded from (When downloading MD5 must match)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "When was the Localize item created",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "When was the last time the localize item was last modified",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLocalizeItemDictionary": {
      "title": "RaptorRaptorLocalizeItemDictionary",
      "description": "Dictionary used to store a list of all staging system events, the Id of the dictionary could be based upon asset or events. But with edge offline is shifting toward event management",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorLocalizeItem"
          }
        ]
      }
    },
    "RaptorLocalizeSnapshotDictionary": {
      "title": "RaptorLocalizeSnapshotDictionary",
      "description": "Dictionary of Localizer Snapshots, key is localizer route",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorLocalizerSnapshot"
          }
        ]
      }
    },
    "RaptorLocalizeStagingReport": {
      "title": "RaptorStagingReport",
      "description": "A Snapshot Glimps into the metric of a Raptor staging processing system",
      "type": "object",
      "properties": {
        "IsSuspended": {
          "description": "Total number of Added Items",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "TotalAddedItems": {
          "description": "Total number of Added Items",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "TotalCompletedItems": {
          "description": "Total number of Processed / Completed Items",
          "oneOf": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "null"
            }
          ]
        },
        "ItemsInQueue": {
          "description": "Number of items in the queue to be processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "PeakItemsInQueue": {
          "description": "Max number of items in the queue to be processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "ItemsProcessing": {
          "description": "Number of items in the queue currently be processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "PeakItemsProcessing": {
          "description": "Max number of items in that were in the queue to be processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "ItemsErrored": {
          "description": "Total Number of items that errored out when being processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "PeakItemsErrored": {
          "description": "Max number of items in that errored out when being processed",
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "SystemStartedDateTime": {
          "description": "Date Time when the staging system was stared",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastUpdatedDateTime": {
          "description": "Timestamp when the report metrics were last updated",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLocalizeStageItemSnapshot": {
      "title": "RaptorLocalizeStageItemSnapshot",
      "description": "Current Localizer snapshot and realtime data",
      "type": "object",
      "properties": {
        "RealtimeTimestamp": {
          "description": "Timestamp when the player snapshot data was taken",
          "type": "string",
          "format": "date-time"
        },
        "RealtimeLocalizerRoute": {
          "description": "The Localizer Messageing Route (ZMQ Topic)",
          "type": "string"
        },
        "RealtimeStagingAction": {
          "description": "The current state of the localize Staging Item",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumStagingActions"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingItemKey": {
          "description": "The localize Item key that Localize data belongs too, must be Unique!",
          "type": "string"
        },
        "StagingItemRefKey": {
          "description": "(optional) Optional Key, for additional tracking details",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingItemRefType": {
          "description": "(optional) Optional Type, for grouping tracking details",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingLevelSummary": {
          "description": "Summary of the staging item current stage level",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingFinalSummary": {
          "description": "When complete to final detail summary of the staging item",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingState": {
          "description": "The current state of the localize Staging Item",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumStagingProcessState"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingCreateDateTime": {
          "description": "Timestamp when the item was created in the staging system",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingScheduledDateTime": {
          "description": "Timestamp when the item is schedule to run or ran...",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingNeededByDateTime": {
          "description": "Used for determining staging ordering and priority, when does this item need to be finished localizing",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingPriority": {
          "description": "Used for determining staging ordering and priority",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "StagingLocalizeItem": {
          "description": "The Actual Staging item details",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorLocalizeItem"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorLocalizeStagingItemSnapshotDictionary": {
      "title": "RaptorLocalizeStagingItemSnapshotDictionary",
      "description": "Dictionary of RaptorLocalizeStageItemSnapshot Snapshots, key is staging key",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorLocalizeStageItemSnapshot"
          }
        ]
      }
    },
    "EnumLocalizeMethod": {
      "title": "EnumLocalizeMethod",
      "description": "Localization Method being used to determine asset files needing localized",
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "x-enumNames": [
        "Invalid",
        "StationAssets",
        "ScheduledAssets"
      ],
      "examples": [
        "0 - Invalid",
        "1 - StationAssets",
        "2 - ScheduledAssets"
      ]
    },
    "EnumLocalizeStatus": {
      "title": "EnumLocalizeStatus",
      "description": "Status of a localize item",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "x-enumNames": [
        "Invalid",
        "Created",
        "Scheduled",
        "Running",
        "Completed",
        "Error"
      ],
      "examples": [
        "0 - Invalid",
        "1 - Created",
        "2 - Scheduled",
        "3 - Running",
        "4 - Completed",
        "5 - Error"
      ]
    },
    "EnumStagingProcessState": {
      "title": "EnumStagingProcessState",
      "description": "This enum should maintain syncronization with the Raptor Staging system Class, See RCS.Raptor.Shared.Staging, StagingSystem.cs for details",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "x-enumNames": [
        "Error",
        "NotStarted",
        "StageReady",
        "StageValidated",
        "StageUpdating",
        "StageRetry",
        "StageDone",
        "Completed"
      ],
      "examples": [
        "0 - Error",
        "1 - NotStarted",
        "2 - StageReady",
        "3 - StageValidated",
        "4 - StageUpdating",
        "5 - StageRetry",
        "6 - StageDone",
        "7 - Completed"
      ]
    },
    "EnumStagingActions": {
      "title": "EnumStagingActions",
      "description": "Type of change actions that occured on the Staging Object",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "x-enumNames": [
        "Invalid",
        "Modify",
        "Add",
        "Delete"
      ],
      "examples": [
        "0 - Invalid",
        "1 - Modify",
        "2 - Add",
        "3 - Delete"
      ]
    },
    "RaptorRecordableSettings": {
      "type": "object",
      "properties": {
        "TrimInThreshold": {
          "description": "Threshold Settings used for the Trim-In detection",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorRecordableThresholdConfig"
            }
          ]
        },
        "TrimOutThreshold": {
          "description": "Threshold Settings used for the Trim-Out detection",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorRecordableThresholdConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorRecordableThresholdConfig": {
      "title": "RaptorRecordableThresholdConfig",
      "description": "Setting for threshold configuration",
      "type": "object",
      "properties": {
        "Decibel": {
          "description": "Value used for the threshold detection",
          "type": "number",
          "default": -30
        },
        "Enable": {
          "description": "Enable the use of the threshold detection",
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "RaptorEdgeDeviceConfig": {
      "title": "RaptorEdgeDeviceConfig",
      "description": "Raptor Edge Device Configuration ",
      "type": "object",
      "properties": {
        "_id": {
          "description": "This Object is a Mongo Collection, and required or Mongo Collections",
          "type": "string"
        },
        "DeviceSerialNumber": {
          "description": "Unique Key, used to track and identify a specific Edge Hardware Device,this will need to match the playerkey using {manufacture-serialnumber)",
          "type": "string"
        },
        "DeviceManufacturer": {
          "description": "Identifies what type of deployment this player is using, (Barix, AudioScience, Sound4, RaspberryPI ...",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumEdgeManufacturer"
            }
          ]
        },
        "DeviceEnabled": {
          "description": "Used to enable and disable activation of the Edge Device",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "DeviceHardwareReport": {
          "description": "Stores a common populated hardware report used by Raptor inquery edge hardware",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorEdgeHardwareReport"
            }
          ]
        },
        "OrganizationID": {
          "description": "organization the device is registered too",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "StationID": {
          "description": "station the device is registered too",
          "oneOf": [
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            {
              "type": "null"
            }
          ]
        },
        "PlayerKey": {
          "description": "The Stations Player this Device is registered too",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceOKTAID": {
          "description": "Device's OKTA ID (okta user id)",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceDescription": {
          "description": "User friendly description of what the edge device is being used for",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceLocalizeMount": {
          "description": "Used to configure an external encrypted audio mount, for localized content",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DeviceCacheMount": {
          "description": "Used to configure an external encrypted audio mount, for player realtime cache content",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "LocalizerConfig": {
          "description": "Configuration of the localizer running as a side car to this player",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorLocalizerConfig"
            }
          ]
        },
        "CreatedDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ModifiedDateTime": {
          "description": "Last modified datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "LastReconcileDateTime": {
          "description": "Datetime (ISO8601) last time edge playlist was reconciled",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorEdgeDeviceArray": {
      "title": "RaptorEdgeDeviceArray",
      "description": "represents an array of EdgeDevice Configurations",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorEdgeDeviceConfig"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorEdgePlayerEnvironment": {
      "title": "RaptorEdgePlayerEnvironment",
      "description": "Player environment, used for connecting and communicate with an external player to Zetta Cloud",
      "type": "object",
      "properties": {
        "EdgeDeviceConfig": {
          "description": "Edge Device Configuration definition",
          "$ref": "#/definitions/RaptorEdgeDeviceConfig"
        },
        "PlayerConfig": {
          "description": "Raptor Player Configuration definition",
          "$ref": "#/definitions/RaptorPlayerConfig"
        },
        "StationName": {
          "description": "Displayable Station Name the Player is assoiciated with",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ApiUrl": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs, The API URL Enpoint, used by the player if communicating via API Calls..",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ApiKey": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs, The API Key need to authenticate, used by the player if communicating via API Calls..",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQPrimaryPublishBrokers": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,Mapping to Primary ZMQ Publishing Endpoint",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQPrimarySubscriptionBrokers": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,Mapping to Primary ZMQ Subscription Endpoint",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQSecondarySubscriptionBrokers": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,Mapping to Secondary ZMQ Subscription Endpoint",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQDbNotifySubscriptionBrokers": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,Mapping to DbNotify ZMQ Subscription Endpoint",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQBrokerPublicKey": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,ZMQ Security Key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQPlayerPublicKey": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,ZMQ Security Key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ZMQPlayerPrivateKey": {
          "description": "[OBSOLETE, DB2021-04-07]: Moving to EdgeOnline / EdgeOffline Configs,ZMQ Security Key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "OrganizationID": {
          "description": "[OBSOLETE, DB2021-04-07]: Replaced EdgeDeviceConfig.OrganizationID",
          "type": "string"
        },
        "StationID": {
          "description": "[OBSOLETE, DB2021-04-07]: Replaced EdgeDeviceConfig.StationID",
          "type": "string"
        },
        "PlayerKey": {
          "description": "[OBSOLETE, DB2021-04-07]: Replaced EdgeDeviceConfig.PlayerKey",
          "type": "string"
        },
        "OrganizationName": {
          "description": "[OBSOLETE, DB2021-04-07]: Never used!",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "EdgeOnlineConfig": {
          "description": "[ADD, DB2021-04-07]: Configuration to be used when Edge Device is CONNECTED to the Cloud",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorSpedooConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "EdgeOfflineConfig": {
          "description": "[ADD, DB2021-04-07]: Configuration to be used when Edge Device is DISCONNECTED from the Cloud",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorSpedooConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "KubernetesConfig": {
          "description": "[ADD, DB2021-06-01]: Configuration to be used when application is internally managed by a kubernetes in the Cloud",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorSpedooConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorEdgeHardwareReport": {
      "title": "RaptorEdgeHardwareReport",
      "description": "A common raptor object used to store and group common hardware properties",
      "type": "object",
      "properties": {
        "Manufacturer": {
          "description": "Identifies what type of deployment this player is using, (Barix, AudioScience, Sound4, RaspberryPI ...",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumEdgeManufacturer"
            }
          ]
        },
        "SerialNumber": {
          "description": "A Unique Serial Number for the Edge Hardware, the device serial number will take this serial number and convert unsupported characters to -",
          "type": "string"
        },
        "Architecture": {
          "description": "Hardware Architecture",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "UUID": {
          "description": "Hardware Unique UUID",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string",
              "format": "guid",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            }
          ]
        },
        "Model": {
          "description": "The model of the Hardware",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "Revision": {
          "description": "Revision of the Hardware",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "Mac": {
          "description": "Hardware Mac Address",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string",
              "pattern": "^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorEdgeHardwareEvent": {
      "title": "RaptorEdgeHardwareEvent",
      "description": "Edge Hardware Event that has taken place.",
      "type": "object",
      "properties": {
        "EventDateTime": {
          "description": "Created datetime (ISO8601)",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "EdgeSerialNumber": {
          "description": "A Unique Serial Number for the Edge Hardware, the device serial number will take this serial number and convert unsupported characters to -",
          "type": "string"
        },
        "EdgeAction": {
          "description": "Identifies what type of edge hardware action that has taken place",
          "$ref": "#/definitions/EnumEdgeHardwareAction"
        }
      },
      "additionalProperties": false
    },
    "RaptorEdgeHardwareHistory": {
      "title": "RaptorEdgeHardwareHistory",
      "description": "A collection of Edge Hardware Events, that identify what activity has been occuring on hardware devices ",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RaptorEdgeHardwareEvent"
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "RaptorSpedooConfig": {
      "title": "RaptorSpedooConfig",
      "description": "Sound Plus Edge Detection Online/Offline Config",
      "type": "object",
      "properties": {
        "SpedooKey": {
          "description": "Unique Key used to identify how/when the configuration is used ie (onlineCloud vs offlineLocal)",
          "type": "string"
        },
        "ZeroMQConfiguration": {
          "description": "Endpoint for ZeroMQ Broker",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEdgeZeroMqConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "IotCoreConfiguration": {
          "description": "IotCoreConfiguration",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEdgeIotCoreConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ApiServerConfiguration": {
          "description": "Endpoint for Api Server",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorEdgeEndpointRegistration"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorSpedooConfigDictionary": {
      "title": "RaptorSpedooConfigDictionary",
      "description": "Generic SubDocument of Available Edge Configuration",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorSpedooConfig"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "RaptorSpedooServiceStatus": {
      "title": "RaptorSpedooServiceStatus",
      "description": "The current state of the (SPEDOO) SoundPlus Edge Detecton online/offline service",
      "properties": {
        "ActiveSpedooKey": {
          "description": "Active edge Config located in the Config Dictionary (config) that should be in use ie (online/offline)",
          "type": "string"
        },
        "ActiveSinceDateTime": {
          "description": "Datetime (ISO8601) representing since the active key was enabled in the system",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "ActiveZeroMqImplementation": {
          "description": "The running implementation of zeromq it can be NetMQ or ZeroMQ",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "IsAutoSwitchEnabled": {
          "description": "Is the auto switch enabled.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "AvailableSpedooConfigDictionary": {
          "description": "Online/Offline",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorSpedooConfigDictionary"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorSpedooAppStatus": {
      "title": "RaptorSpedooAppStatus",
      "description": "The current application endpoint running configuration",
      "type": "object",
      "properties": {
        "RegistrationKey": {
          "description": "Application unique identifier",
          "type": "string"
        },
        "ActiveZeroMqImplementation": {
          "description": "The running implementation of zeromq it can be NetMQ or ZeroMQ",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "string"
            }
          ]
        },
        "ConnectionStatus": {
          "description": "Actual status of the active connection services",
          "$ref": "#/definitions/EnumSpedooConnectionStatus"
        },
        "ActiveSpedooConfig": {
          "description": "The active edge services endpoint configuration",
          "$ref": "#/definitions/RaptorSpedooConfig"
        }
      },
      "additionalProperties": false
    },
    "RaptorEdgeDeviceStatus": {
      "title": "RaptorEdgeDeviceStatus",
      "description": "The current state of the edge hardware.",
      "properties": {
        "DeviceHardwareReport": {
          "description": "Stores a common populated hardware report used by Raptor inquery edge hardware",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/RaptorEdgeHardwareReport"
            }
          ]
        },
        "DeviceMode": {
          "description": "Active/Standby",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/EnumEdgeDeviceMode"
            }
          ]
        },
        "IsSilenceDetected": {
          "description": "Is silence detected",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "IsAutoSwitchEnabled": {
          "description": "Is the auto switch enabled.",
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "RaptorEdgeEndpointRegistration": {
      "title": "RaptorEdgeEndpointRegistration",
      "description": "A request to subscribe an endpoint in order to receive callback http calls",
      "type": "object",
      "properties": {
        "RegistrationKey": {
          "description": " A unique key used to identify an unique instance of the endpoint registration. The RegistrationKey should be use to update or delete the endpoint registration",
          "type": "string"
        },
        "ApiEndpointUrl": {
          "description": "Api server endpoint url",
          "type": "string"
        },
        "ApiEndpointPort": {
          "description": "Api server listening port",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ApiEndpointKey": {
          "description": "Api server api key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorEdgeApiEndpointDictionary": {
      "title": "RaptorEdgeApiEndpointDictionary",
      "description": "Dictionary containing api endpoints",
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/RaptorEdgeEndpointRegistration"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "EnumEdgeManufacturer": {
      "title": "EnumEdgeManufacturer",
      "description": "Wellknown Edge Manufacure",
      "type": "string",
      "enum": [
        "Unknown",
        "RaspberryPi",
        "AudioScience",
        "Barix",
        "Sound4"
      ]
    },
    "EnumEdgeHardwareAction": {
      "title": "EnumEdgeHardwareAction",
      "description": "Wellknown Edge Hardware Actions",
      "type": "string",
      "enum": [
        "Unknown",
        "Detected_Silence",
        "Detected_Playing",
        "Mode_Active",
        "Mode_StandBy",
        "Startup",
        "Shutdown"
      ]
    },
    "EnumEdgeDeviceMode": {
      "title": "EnumEdgeDeviceMode",
      "description": "Wellknown Edge Manufacure",
      "type": "string",
      "enum": [
        "Unknown",
        "Active",
        "Standby"
      ]
    },
    "RaptorEdgeZeroMqConfiguration": {
      "title": "RaptorEdgeZeroMqConfiguration",
      "description": "Contains a set of arrays with defines the primary and secondary publishers, subscribers and db notifiers",
      "type": "object",
      "properties": {
        "ConfigurationKey": {
          "description": "Unique identifier for the zero mq manager configuration",
          "type": "string"
        },
        "PrimaryPublisherBrokers": {
          "description": "ZeroMQ Client, Primary brokers to publish",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PrimarySubscriberBrokers": {
          "description": "ZeroMQ Client, Primary brokers to subscribe",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SecondarySubscriberBrokers": {
          "description": "ZeroMQ Client, Secondary brokers to subscribe",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DbNotifiersSubscriberBrokers": {
          "description": "ZeroMQ Client, Db notifiers brokers to subscribe",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BrokerPrivateKey": {
          "description": "ZeroMQ Broker Private key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "BrokerPublicKey": {
          "description": "ZeroMQ Broker Public Key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ClientPrivateKey": {
          "description": "ZeroMQ Client private key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ClientPublicKey": {
          "description": "ZeroMQ Client public key",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RaptorEdgeIotCoreConfiguration": {
      "title": "RaptorEdgeIotCoreConfiguration",
      "description": "RaptorEdgeIotCoreConfiguration",
      "type": "object",
      "properties": {
        "ConfigurationKey": {
          "description": "Unique identifier for the zero mq manager configuration",
          "type": "string"
        },
        "PrimaryPublisherUrls": {
          "description": "PrimaryPublisherUrls",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "PrimarySubscriberUrls": {
          "description": "PrimarySubscriberUrls",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "SecondarySubscriberUrls": {
          "description": "SecondarySubscriberUrls",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "DbNotifiersSubscriberUrls": {
          "description": "DbNotifiersSubscriberUrls",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "ConnectionSettings": {
          "description": "ConnectionSettings",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "EnumSpedooConnectionStatus": {
      "title": "EnumSpedooConnectionStatus",
      "description": "Current station of the Soundplus Edge Connection",
      "type": "string",
      "enum": [
        "Unknown",
        "Initializing",
        "Connected",
        "Disconnected"
      ]
    },
    "FTPIngestParameters": {
      "title": "FTPIngestParameters",
      "description": "core object that is used for job execution",
      "type": "object",
      "properties": {
        "JobKey": {
          "description": "unique job key using pattern  recommended pattern: {awsguid}_({orgguid})_{trackingguid}.{operation}",
          "type": "string"
        },
        "OrganizationId": {
          "description": "organization id",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "JobParameter": {
          "description": "all parameters used for job execution",
          "oneOf": [
            {
              "$ref": "#/definitions/FTPIngestJobParameter"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "FTPIngestJobParameter": {
      "title": "FTPIngestJobParameter",
      "description": "all parameters used for job execution",
      "type": "object",
      "properties": {
        "JobStatus": {
          "description": "The current status of a scheduled job",
          "oneOf": [
            {
              "$ref": "#/definitions/EnumJobStatus"
            }
          ]
        },
        "FileSearchParameters": {
          "description": "contents fields that needs to identify the file from FTP server",
          "oneOf": [
            {
              "$ref": "#/definitions/FTPIngestFileSearchParameters"
            },
            {
              "type": "null"
            }
          ]
        },
        "IngestAsset": {
          "description": "represent few asset fields and few additional fields that is used in job execution",
          "oneOf": [
            {
              "$ref": "#/definitions/FTPIngestAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "JobRequestData": {
          "description": "cotains data related to job schedule and search file for request",
          "oneOf": [
            {
              "$ref": "#/definitions/FTPIngestJobRequestData"
            },
            {
              "type": "null"
            }
          ]
        },
        "ScheduledDate": {
          "description": "Job schedule at datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "FTPIngestFileSearchParameters": {
      "title": "FTPIngestFileSearchParameters",
      "description": "ontents fields that needs to identify the file from FTP server",
      "type": "object",
      "properties": {
        "FTPHost": {
          "description": "FTP Host name",
          "type": "string"
        },
        "Username": {
          "description": "encrypted username to access FTP server",
          "type": "string"
        },
        "Password": {
          "description": "encrypted password to access FTP server",
          "type": "string"
        },
        "SearchString": {
          "description": "set when file name must be match with serach string",
          "type": "string"
        },
        "IsSearchStringRequiredAll": {
          "description": "FTP Host and/or folder path where the file will be located",
          "type": "boolean"
        },
        "ExcludeString": {
          "description": "criteria used to exclude which file shouldn’t be downloaded from the FTP server.",
          "type": [
            "null",
            "string"
          ]
        },
        "RetryTimeBox": {
          "description": "represents retry time for identifying file from FTP server",
          "type": "string"
        },
        "JobScheduledDate": {
          "description": "Job schedule at datetime (ISO8601)",
          "type": "string",
          "format": "date-time"
        },
        "TimeZone": {
          "description": "timezone that the user was located on job’s creation....https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
          "type": "string"
        },
        "Vector": {
          "description": "vector that going to used for decryption this vector should be same which id used for encryption",
          "type": "string"
        },
        "FTPPath": {
          "description": "FTP path where the file will be located",
          "type": "string"
        }
      }
    },
    "FTPIngestAsset": {
      "title": "FTPIngestIngestAsset",
      "description": "incoming asset data for job execution",
      "type": "object",
      "properties": {
        "Asset": {
          "description": "",
          "oneOf": [
            {
              "$ref": "#/definitions/RaptorAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "FilePath": {
          "description": "path for the local temp folder between download and upload process",
          "type": "string"
        },
        "PreSignedUrl": {
          "title": "PreSignedUrl",
          "description": "Response from import, with presigned url",
          "type": "object",
          "$ref": "#/definitions/RaptorAPIImportResponse"
        }
      }
    },
    "FTPIngestJobRequestData": {
      "title": "FTPIngestJobRequestData",
      "description": "cotains data related to job schedule and search file for request",
      "type": "object",
      "properties": {
        "AssetId": {
          "description": "unique id used to get all Asset information",
          "type": "string",
          "format": "guid",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "InputPath": {
          "description": "FTP Host and/or folder path where the file will be located",
          "type": "string"
        },
        "FtpUsername": {
          "description": "encrypted username to access FTP server",
          "type": "string"
        },
        "FtpPassword": {
          "description": "encrypted password to access FTP server",
          "type": "string"
        },
        "SearchString": {
          "description": "criteria used to find which file should be downloaded from the FTP server",
          "type": "string"
        },
        "ExcludeString": {
          "description": "criteria used to exclude which file shouldn’t be downloaded from the FTP server.",
          "type": [
            "null",
            "string"
          ]
        },
        "RelativeReleaseDate": {
          "description": "relative amount of time that the asset release date must be updated to when the job runs",
          "type": "string",
          "format": "dd hh mm"
        },
        "RelativeKillDate": {
          "description": "relative amount of time that the asset kill date must be updated to when the job runs",
          "type": "string",
          "format": "dd hh mm"
        },
        "NotificationTime": {
          "description": "time that user should be notified about no file was found on the FTP server based on the search parameters",
          "type": [
            "null",
            "string"
          ],
          "format": "mm"
        },
        "DisplayTitle": {
          "description": "value that has to updated as a Asset’s Display Title after the job execution",
          "type": [
            "null",
            "string"
          ]
        },
        "Title": {
          "description": "value that has to updated as a Asset’s Title after the job execution",
          "type": [
            "null",
            "string"
          ]
        },
        "Comment": {
          "description": "value that has to updated the Asset’s Comment after the job execution",
          "type": [
            "null",
            "string"
          ]
        },
        "TimeZone": {
          "description": "timezone that the user was located on job’s creation....https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
          "type": "string"
        },
        "IsSearchStringRequiredAll": {
          "description": "set when file name must be match with serach string",
          "type": "boolean"
        },
        "Vector": {
          "description": "vector that going to used for decryption this vector should be same which id used for encryption",
          "type": "string"
        },
        "FTPStatus": {
          "description": "status of last execution of ingest job",
          "oneOf": [
            {
              "$ref": "#/definitions/FTPIngestJobStatus"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "FTPIngestJobStatus": {
      "title": "FTPStatus",
      "description": "Contains data related to Last FTP ingest job execution",
      "type": "object",
      "properties": {
        "FTPCredentialsDecryption": {
          "description": "Indicate if during FTP ingest job execution the decrypt credential process was successfully executed",
          "type": "boolean"
        },
        "FTPCredentialsDecryptionDetails": {
          "description": "FTP ingest job decrypt credential process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPConnection": {
          "description": "Indicate if during FTP ingest job execution the FTP connection process was successfully executed",
          "type": "boolean"
        },
        "FTPConnectionDetails": {
          "description": "FTP ingest job FTP connection process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPFileIdentification": {
          "description": "Indicate if during FTP ingest job execution the file identification process was successfully executed",
          "type": "boolean"
        },
        "FTPFileIdentificationDetails": {
          "description": "FTP ingest job file identification process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPDownloadFile": {
          "description": "Indicate if during FTP ingest job execution the file download process was successfully executed",
          "type": "boolean"
        },
        "FTPDownloadFileDetails": {
          "description": "FTP ingest job file download process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPFileIntegrityCheck": {
          "description": "Indicate if during FTP ingest job execution the file integrity check process was successfully executed",
          "type": "boolean"
        },
        "FTPFileIntegrityCheckDetails": {
          "description": "FTP ingest job file integrity check process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPImportAsset": {
          "description": "Indicate if during FTP ingest job execution the import asset process was successfully executed",
          "type": "boolean"
        },
        "FTPImportAssetDetails": {
          "description": "FTP ingest job import asset process details",
          "type": [
            "null",
            "string"
          ]
        },
        "FTPExecutionDatetime": {
          "description": "Indicate the date and time FTP ingest job executed",
          "type": [
            "null",
            "string"
          ]
        }
      }
    },
    "SoundplusMetadataFormatter": {
      "title": "SoundplusMetadataFormatter",
      "description": "expected array of objects to be cleaned and returned",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cleanup"
          }
        }
      ]
    },
    "Cleanup": {
      "title": "Cleanup",
      "description": "expected object to be cleaned",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id used to track back cleaned information",
          "type": "string"
        },
        "Artist": {
          "description": "Artist name desired to be cleaned",
          "type": "string"
        },
        "DisplayTitle": {
          "description": "Title name desired to be cleaned",
          "type": "string"
        }
      }
    }
  }
}